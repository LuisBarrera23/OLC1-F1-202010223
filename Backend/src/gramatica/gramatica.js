/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[38,39,40,41,42],$V1=[2,52],$V2=[1,17],$V3=[1,26],$V4=[1,36],$V5=[1,28],$V6=[1,19],$V7=[1,27],$V8=[1,23],$V9=[1,24],$Va=[1,20],$Vb=[1,21],$Vc=[1,22],$Vd=[1,25],$Ve=[1,32],$Vf=[1,38],$Vg=[1,29],$Vh=[1,31],$Vi=[1,33],$Vj=[1,34],$Vk=[1,39],$Vl=[1,40],$Vm=[1,41],$Vn=[1,42],$Vo=[1,43],$Vp=[2,5,20,21,24,28,30,31,35,38,39,40,41,42,43,44,45,46,47,52,55,56,57,58,73,75,76,77,78,79],$Vq=[2,5,20,21,24,28,30,31,35,38,39,40,41,42,43,44,45,46,47,50,52,55,56,57,58,73,75,76,77,78,79],$Vr=[56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],$Vs=[2,84],$Vt=[1,49],$Vu=[1,50],$Vv=[1,51],$Vw=[1,52],$Vx=[1,53],$Vy=[2,88],$Vz=[1,67],$VA=[1,68],$VB=[1,69],$VC=[1,71],$VD=[1,70],$VE=[1,72],$VF=[1,73],$VG=[1,74],$VH=[1,75],$VI=[1,76],$VJ=[1,77],$VK=[1,78],$VL=[1,79],$VM=[1,80],$VN=[1,81],$VO=[1,82],$VP=[1,83],$VQ=[1,84],$VR=[19,23,34,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],$VS=[1,91],$VT=[19,23,34,56,57,58,59,64,65,66,67,68,69,70,71,72],$VU=[19,23,34,56,57,58,59,60,61,63,64,65,66,67,68,69,70,71,72],$VV=[2,28],$VW=[2,33],$VX=[1,131],$VY=[1,132],$VZ=[1,133],$V_=[1,134],$V$=[1,135],$V01=[19,23,34,64,65,66,67,68,69,70,71,72],$V11=[23,34],$V21=[1,158],$V31=[2,48],$V41=[1,170];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"ASIGNACION":8,"BLOQUE":9,"PRINT":10,"PRINTLN":11,"LLAMADA":12,"METODO":13,"IF":14,"WHILE":15,"DOWHILE":16,"FOR":17,"MOD":18,";":19,"pr_while":20,"(":21,"E":22,")":23,"pr_for":24,"INICIALIZACION":25,"ACTUALIZACION":26,"TIPODATO_DECLARACION":27,"id":28,"=":29,"pr_do":30,"pr_call":31,"LLPARAMETROS":32,"LLPARAMETRO":33,",":34,"pr_void":35,"PARAMETROS":36,"PARAMETRO":37,"pr_int":38,"pr_string":39,"pr_bool":40,"pr_double":41,"pr_char":42,"{":43,"}":44,"pr_print":45,"pr_println":46,"pr_if":47,"BLOQUEIF":48,"ELSE":49,"pr_else":50,"TIPO_DECLARACION":51,"pr_const":52,"IDS":53,"TYPEOF":54,"pr_typeof":55,"++":56,"--":57,"-":58,"+":59,"*":60,"/":61,"**":62,"%":63,">":64,"<":65,">=":66,"<=":67,"==":68,"!=":69,"||":70,"&&":71,"^":72,"!":73,"F":74,"tk_entero":75,"tk_decimal":76,"tk_cadena":77,"tk_caracter":78,"tk_booleano":79,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",19:";",20:"pr_while",21:"(",23:")",24:"pr_for",28:"id",29:"=",30:"pr_do",31:"pr_call",34:",",35:"pr_void",38:"pr_int",39:"pr_string",40:"pr_bool",41:"pr_double",42:"pr_char",43:"{",44:"}",45:"pr_print",46:"pr_println",47:"pr_if",50:"pr_else",52:"pr_const",55:"pr_typeof",56:"++",57:"--",58:"-",59:"+",60:"*",61:"/",62:"**",63:"%",64:">",65:"<",66:">=",67:"<=",68:"==",69:"!=",70:"||",71:"&&",72:"^",73:"!",75:"tk_entero",76:"tk_decimal",77:"tk_cadena",78:"tk_caracter",79:"tk_booleano"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[15,5],[17,9],[25,4],[25,3],[26,3],[26,1],[16,7],[12,6],[32,3],[32,1],[32,0],[33,1],[13,6],[36,3],[36,1],[36,0],[37,2],[37,2],[37,2],[37,2],[37,2],[9,3],[9,2],[10,5],[11,5],[14,6],[14,6],[49,2],[49,2],[49,2],[49,0],[48,3],[48,2],[51,1],[51,0],[27,1],[27,1],[27,1],[27,1],[27,1],[7,6],[8,4],[53,3],[53,1],[54,4],[18,2],[18,2],[18,2],[18,2],[22,2],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,1],[22,1],[22,3],[22,1],[22,1],[74,1],[74,1],[74,1],[74,1],[74,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 3:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 4: case 27: case 32:
this.$=[$$[$0]];
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 23: case 45: case 46: case 47: case 84: case 87:
this.$=$$[$0];
break;
case 16:
this.$=$$[$0-1];
break;
case 17:
 
                instancia.addError(new Error("Sintactico","Error en produccion de gramatica",_$[$0-1].first_line,_$[$0-1].first_column));
                
break;
case 18:
this.$=new While($$[$0-2],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 19:
this.$=new For($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line, _$[$0-8].first_column);
break;
case 20:
this.$=new Declaracion($$[$0-2],$$[$0-3],$$[$0],true,_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 21: case 22:
this.$=new Asignar($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 24:
this.$=new Dowhile($$[$0-2],$$[$0-5],_$[$0-6].first_line, _$[$0-6].first_column)
break;
case 25:
this.$=new llamada($$[$0-4],$$[$0-2],_$[$0-5].first_line, _$[$0-5].first_column)
break;
case 26: case 31: case 60:
$$[$0].unshift($$[$0-2]); this.$=$$[$0];
break;
case 29: case 53: case 54: case 55: case 56: case 57:
this.$=$$[$0]
break;
case 30:
this.$=new metodo($$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column)
break;
case 34:
this.$=new Parametro(Type.NUMBER,$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 35:
this.$=new Parametro(Type.STRING,$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 36:
this.$=new Parametro(Type.BOOLEAN,$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 37:
this.$=new Parametro(Type.DOUBLE,$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 38:
this.$=new Parametro(Type.CHAR,$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 39: case 49:
this.$=new Bloque($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 41:
this.$=new Print($$[$0-2],_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 42:
this.$=new Println($$[$0-2],_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 43: case 44:
this.$=new Sentencia_if($$[$0-3],$$[$0-1],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 51:
this.$=false
break;
case 52:
this.$=true
break;
case 58:
   //console.log($$[$0-3]); 
            this.$=new Declaracion($$[$0-3],$$[$0-4],$$[$0-1],$$[$0-5],_$[$0-5].first_line, _$[$0-5].first_column);
        
break;
case 59:

            this.$=new Asignar($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
        
break;
case 61:
this.$=[$$[$0]]
break;
case 62: case 86:
this.$=$$[$0-1]
break;
case 63:
this.$=new Modificador($$[$0],modificadorOption.INCREIZQUIERDA,_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 64:
this.$=new Modificador($$[$0-1],modificadorOption.INCREDERECHA,_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 65:
this.$=new Modificador($$[$0-1],modificadorOption.DECREDERECHA,_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 66:
this.$=new Modificador($$[$0],modificadorOption.DECREIZQUIERDA,_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 67:
this.$=new Arithmetic($$[$0],$$[$0],ArithmeticOption.NEGACION, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 68:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MAS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 69:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MENOS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 70:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 71:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.DIV, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 72:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.POT, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 73:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MODULO, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 74:
this.$= new Relacional($$[$0-2],$$[$0],RelacionalOption.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 75:
this.$= new Relacional($$[$0-2],$$[$0],RelacionalOption.MENOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 76:
this.$= new Relacional($$[$0-2],$$[$0],RelacionalOption.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 77:
this.$= new Relacional($$[$0-2],$$[$0],RelacionalOption.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 78:
this.$= new Relacional($$[$0-2],$$[$0],RelacionalOption.IGUALQUE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 79:
this.$= new Relacional($$[$0-2],$$[$0],RelacionalOption.DIFERENTEDE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 80:
this.$= new Logica($$[$0-2],$$[$0],logicaOption.OR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 81:
this.$= new Logica($$[$0-2],$$[$0],logicaOption.AND, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 82:
this.$= new Logica($$[$0-2],$$[$0],logicaOption.XOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 83:
this.$= new Logica($$[$0],$$[$0],logicaOption.NOT, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 85:
this.$= new Typof($$[$0],_$[$0].first_line, _$[$0].first_column);
break;
case 88:
this.$=new Acceso($$[$0],_$[$0].first_line, _$[$0].first_column);console.log("desde la gramatica");
break;
case 89:
this.$=new Literal($$[$0],Type.NUMBER, _$[$0].first_line, _$[$0].first_column)
break;
case 90:
this.$=new Literal($$[$0],Type.DOUBLE, _$[$0].first_line, _$[$0].first_column)
break;
case 91:
this.$=new Literal($$[$0],Type.STRING, _$[$0].first_line, _$[$0].first_column)
break;
case 92:
this.$=new Literal($$[$0],Type.CHAR, _$[$0].first_line, _$[$0].first_column)
break;
case 93:
this.$=new Literal($$[$0],Type.BOOLEAN, _$[$0].first_line, _$[$0].first_column)
break;
}
},
table: [o($V0,$V1,{3:1,4:2,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,51:18,22:30,54:35,74:37,2:$V2,5:[1,3],20:$V3,21:$V4,24:$V5,28:$V6,30:$V7,31:$V8,35:$V9,43:$Va,45:$Vb,46:$Vc,47:$Vd,52:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo}),{1:[3]},o($V0,$V1,{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,51:18,22:30,54:35,74:37,6:45,2:$V2,5:[1,44],20:$V3,21:$V4,24:$V5,28:$V6,30:$V7,31:$V8,35:$V9,43:$Va,45:$Vb,46:$Vc,47:$Vd,52:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo}),{1:[2,2]},o($Vp,[2,4]),o($Vq,[2,5]),o($Vq,[2,6]),o($Vq,[2,7]),o($Vq,[2,8]),o($Vq,[2,9]),o($Vq,[2,10]),o($Vq,[2,11]),o($Vq,[2,12]),o($Vq,[2,13]),o($Vq,[2,14]),o($Vq,[2,15]),o($Vr,$Vs,{19:[1,46]}),{19:[1,47]},{27:48,38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx},o($Vr,$Vy,{29:[1,54]}),o($V0,$V1,{6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,51:18,22:30,54:35,74:37,4:55,2:$V2,20:$V3,21:$V4,24:$V5,28:$V6,30:$V7,31:$V8,35:$V9,43:$Va,44:[1,56],45:$Vb,46:$Vc,47:$Vd,52:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo}),{21:[1,57]},{21:[1,58]},{28:[1,59]},{28:[1,60]},{21:[1,61]},{21:[1,62]},{9:63,43:$Va},{21:[1,64]},{18:66,21:$V4,22:65,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ},{18:66,21:$V4,22:85,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},o($V0,[2,51]),{18:66,21:$V4,22:86,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{18:66,21:$V4,22:87,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},o($VR,[2,85]),{18:66,21:$V4,22:88,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},o($VR,[2,87]),{21:[1,89]},o($VR,[2,89]),o($VR,[2,90]),o($VR,[2,91]),o($VR,[2,92]),o($VR,[2,93]),{1:[2,1]},o($Vp,[2,3]),o($Vq,[2,16]),o($Vq,[2,17]),{28:$VS,53:90},{28:[2,53]},{28:[2,54]},{28:[2,55]},{28:[2,56]},{28:[2,57]},{18:66,21:$V4,22:92,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},o($V0,$V1,{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,51:18,22:30,54:35,74:37,6:45,2:$V2,20:$V3,21:$V4,24:$V5,28:$V6,30:$V7,31:$V8,35:$V9,43:$Va,44:[1,93],45:$Vb,46:$Vc,47:$Vd,52:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo}),o($Vq,[2,40]),{18:66,21:$V4,22:94,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{18:66,21:$V4,22:95,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{21:[1,96]},{21:[1,97]},{18:66,21:$V4,22:98,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{18:66,21:$V4,22:99,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{20:[1,100]},{25:101,27:102,28:[1,103],38:$Vt,39:$Vu,40:$Vv,41:$Vw,42:$Vx},o($VT,[2,63],{60:$VE,61:$VF,62:$VG,63:$VH}),o($VR,$Vs),o($VR,$Vy),o($VR,[2,64]),o($VR,[2,65]),{18:66,21:$V4,22:104,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{18:66,21:$V4,22:105,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{18:66,21:$V4,22:106,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{18:66,21:$V4,22:107,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{18:66,21:$V4,22:108,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{18:66,21:$V4,22:109,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{18:66,21:$V4,22:110,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{18:66,21:$V4,22:111,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{18:66,21:$V4,22:112,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{18:66,21:$V4,22:113,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{18:66,21:$V4,22:114,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{18:66,21:$V4,22:115,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{18:66,21:$V4,22:116,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{18:66,21:$V4,22:117,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{18:66,21:$V4,22:118,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},o($VT,[2,66],{60:$VE,61:$VF,62:$VG,63:$VH}),o($VR,[2,67]),o($VU,[2,83],{62:$VG}),{23:[1,119],56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ},{18:66,21:$V4,22:120,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{29:[1,121]},{29:[2,61],34:[1,122]},{19:[1,123],56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ},o($Vq,[2,39]),{23:[1,124],56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ},{23:[1,125],56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ},{18:66,21:$V4,22:128,23:$VV,28:$Vz,32:126,33:127,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{23:$VW,36:129,37:130,38:$VX,39:$VY,40:$VZ,41:$V_,42:$V$},{23:[1,136],56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ},{23:[1,137],56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ},{21:[1,138]},{19:[1,139]},{28:[1,140]},{29:[1,141]},o($VT,[2,68],{60:$VE,61:$VF,62:$VG,63:$VH}),o($VT,[2,69],{60:$VE,61:$VF,62:$VG,63:$VH}),o($VU,[2,70],{62:$VG}),o($VU,[2,71],{62:$VG}),o($VU,[2,72],{62:$VG}),o($VU,[2,73],{62:$VG}),o($V01,[2,74],{56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH}),o($V01,[2,75],{56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH}),o($V01,[2,76],{56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH}),o($V01,[2,77],{56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH}),o($V01,[2,78],{56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH}),o($V01,[2,79],{56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH}),o([19,23,34,70],[2,80],{56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,71:$VP,72:$VQ}),o([19,23,34,70,71],[2,81],{56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,72:$VQ}),o([19,23,34,70,71,72],[2,82],{56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN}),o($VR,[2,86]),{23:[1,142],56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ},{18:66,21:$V4,22:143,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{28:$VS,53:144},o($Vq,[2,59]),{19:[1,145]},{19:[1,146]},{23:[1,147]},{23:[2,27],34:[1,148]},o($V11,[2,29],{56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ}),{23:[1,149]},{23:[2,32],34:[1,150]},{28:[1,151]},{28:[1,152]},{28:[1,153]},{28:[1,154]},{28:[1,155]},o($V0,$V1,{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,51:18,22:30,54:35,74:37,48:156,6:157,2:$V2,20:$V3,21:$V4,24:$V5,28:$V6,30:$V7,31:$V8,35:$V9,43:$V21,45:$Vb,46:$Vc,47:$Vd,52:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo}),{9:159,43:$Va},{18:66,21:$V4,22:160,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{18:66,21:$V4,22:161,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{29:[1,162]},{18:66,21:$V4,22:163,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},o($VR,[2,62]),{19:[1,164],56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ},{29:[2,60]},o($Vq,[2,41]),o($Vq,[2,42]),{19:[1,165]},{18:66,21:$V4,22:128,23:$VV,28:$Vz,32:166,33:127,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{9:167,43:$Va},{23:$VW,36:168,37:130,38:$VX,39:$VY,40:$VZ,41:$V_,42:$V$},o($V11,[2,34]),o($V11,[2,35]),o($V11,[2,36]),o($V11,[2,37]),o($V11,[2,38]),o($Vp,$V31,{49:169,50:$V41}),o($Vp,$V31,{49:171,50:$V41}),o($V0,$V1,{6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,51:18,22:30,54:35,74:37,4:172,2:$V2,20:$V3,21:$V4,24:$V5,28:$V6,30:$V7,31:$V8,35:$V9,43:$Va,44:[1,173],45:$Vb,46:$Vc,47:$Vd,52:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo}),o($Vq,[2,18]),{23:[1,174],56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ},{19:[1,175],56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ},{18:66,21:$V4,22:176,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{19:[2,21],56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ},o($Vq,[2,58]),o($Vq,[2,25]),{23:[2,26]},o($Vq,[2,30]),{23:[2,31]},o($Vq,[2,43]),o($V0,$V1,{7:5,8:6,9:7,10:8,11:9,12:10,13:11,15:13,16:14,17:15,18:16,51:18,22:30,54:35,74:37,14:177,48:178,6:179,2:$V2,20:$V3,21:$V4,24:$V5,28:$V6,30:$V7,31:$V8,35:$V9,43:$V21,45:$Vb,46:$Vc,47:$Vd,52:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo}),o($Vq,[2,44]),o($V0,$V1,{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,51:18,22:30,54:35,74:37,6:45,2:$V2,20:$V3,21:$V4,24:$V5,28:$V6,30:$V7,31:$V8,35:$V9,43:$Va,44:[1,180],45:$Vb,46:$Vc,47:$Vd,52:$Ve,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo}),o($Vq,[2,50]),{19:[1,181]},{18:184,21:$V4,22:30,26:182,28:[1,183],54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},{19:[2,20],56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ},o($Vq,[2,45]),o($Vq,[2,46]),o($Vq,[2,47]),o($Vq,[2,49]),o($Vq,[2,24]),{23:[1,185]},o($Vr,$Vy,{29:[1,186]}),o([23,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],[2,23]),{9:187,43:$Va},{18:66,21:$V4,22:188,28:$Vz,54:35,55:$Vf,56:$Vg,57:$Vh,58:$Vi,73:$Vj,74:37,75:$Vk,76:$Vl,77:$Vm,78:$Vn,79:$Vo},o($Vq,[2,19]),{23:[2,22],56:$VA,57:$VB,58:$VC,59:$VD,60:$VE,61:$VF,62:$VG,63:$VH,64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,69:$VN,70:$VO,71:$VP,72:$VQ}],
defaultActions: {3:[2,2],44:[2,1],49:[2,53],50:[2,54],51:[2,55],52:[2,56],53:[2,57],144:[2,60],166:[2,26],168:[2,31]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Literal} = require('../expresiones/literal');

    const {Arithmetic} = require('../expresiones/aritmeticas');
    const {ArithmeticOption} = require('../expresiones/aritmeticOption');

    const {Relacional} = require('../expresiones/relacional');
    const {RelacionalOption} = require('../expresiones/relacionalOption');

    const {Logica} = require('../expresiones/logica');
    const {logicaOption} = require('../expresiones/logicaOption');

    const {Modificador} = require('../expresiones/modificador');
    const {modificadorOption} = require('../expresiones/modificadorOption');

    const {Typof} = require('../expresiones/typeof');

    const {Sentencia_if} = require('../instrucciones/if');
    const {While} = require('../instrucciones/while');
    const {Dowhile} = require('../instrucciones/dowhile');
    const {For} = require('../instrucciones/for');
    const {metodo} = require('../instrucciones/metodo');
    const {llamada} = require('../instrucciones/llamada');
    const {Declaracion} = require('../instrucciones/declaracion');
    const {Asignar} = require('../instrucciones/asignar');
    const {Type} = require('../symbols/type');
    const {Bloque}= require('../instrucciones/bloque');
    const {Print} = require('../instrucciones/print');
    const {Println} = require('../instrucciones/println');
    const {Acceso}=require('../expresiones/acceso');

    const {Singleton}=require("../patronSingleton/singleton");
    const {Error}=require("../objetos/error");
    const {Parametro}=require("../objetos/parametro");
    const instancia=Singleton.getInstance();
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
                                console.log("el lexema encontrado es :"+ yy_.yytext) 
                                return 76
                            
break;
case 1:
                                console.log("el lexema encontrado es :"+ yy_.yytext) 
                                return 75
                            
break;
case 2:
                                console.log("el lexema encontrado es :"+ yy_.yytext) 
                                return 77
                            
break;
case 3:
                                console.log("el lexema encontrado es :"+ yy_.yytext) 
                                return 78
                            
break;
case 4:
                                console.log("el lexema encontrado es :"+ yy_.yytext) 
                                return 79
                            
break;
case 5:
                    console.log("el lexema encontrado es :"+ yy_.yytext);
                    return 38;
                
break;
case 6:
                    console.log("el lexema encontrado es :"+ yy_.yytext);
                    return 39;
                
break;
case 7:
                    console.log("el lexema encontrado es :"+ yy_.yytext);
                    return 40;
                
break;
case 8:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 41;
                
break;
case 9:
                    console.log("el lexema encontrado es :"+ yy_.yytext);
                    return 42;
                
break;
case 10:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 52;
                
break;
case 11:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 45;
                
break;
case 12:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 46;
                
break;
case 13:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 55;
                
break;
case 14:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 47;
                
break;
case 15:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 50;
                
break;
case 16:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 35;
                
break;
case 17:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 31;
                
break;
case 18:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 20;
                
break;
case 19:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 30;
                
break;
case 20:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 24;
                
break;
case 21:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 19;
                
break;
case 22:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 34;
                
break;
case 23:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return ':';
                
break;
case 24:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 43;
                
break;
case 25:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 44;
                
break;
case 26:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 21;
                
break;
case 27:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 23;
                
break;
case 28:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 56;
                
break;
case 29:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 59;
                
break;
case 30:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 57;
                
break;
case 31:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 58;
                
break;
case 32:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 62;
                
break;
case 33:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 60;
                
break;
case 34:
                    //console.log("comentario de una linea")
                
break;
case 35:
break;
case 36:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 61;
                
break;
case 37:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 63;
                
break;
case 38:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 68;
                
break;
case 39:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 29;
                
break;
case 40:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 69;
                
break;
case 41:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 66;
                
break;
case 42:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 67;
                
break;
case 43:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 64;
                
break;
case 44:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 65;
                
break;
case 45:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 70;
                
break;
case 46:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 71;
                
break;
case 47:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 72;
                
break;
case 48:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 73;
                
break;
case 49:
                                console.log("el lexema encontrado es :"+ yy_.yytext); 
                                return 28;
                            
break;
case 50:
break;
case 51:
break;
case 52:
break;
case 53:return 5
break;
case 54: 
        //console.log("error lexico:"+yy_.yytext+ " fila: "+yy_.yylloc.first_line+" columna: "+yy_.yylloc.first_column);
        instancia.addError(new Error("Lexico","lexema: "+yy_.yytext+" no coincide con ningun patrón",yy_.yylloc.first_line,yy_.yylloc.first_column+1));
        //push para array errores
    
break;
}
},
rules: [/^(?:[0-9]+(\.[0-9]+))/i,/^(?:[0-9]+)/i,/^(?:[\"](\\"|[^"])*[\"])/i,/^(?:[\']([^']|\\n|\\t|(\\)(\\))?[\'])/i,/^(?:true|false\b)/i,/^(?:int\b)/i,/^(?:String\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:const\b)/i,/^(?:Print\b)/i,/^(?:Println\b)/i,/^(?:typeof\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:void\b)/i,/^(?:call\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\/)/i,/^(?:%)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:[a-zA-ZñÑ][a-zA-Z0-9_ñÑ]*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}