/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,23],$V1=[1,26],$V2=[1,24],$V3=[1,49],$V4=[1,36],$V5=[1,37],$V6=[1,33],$V7=[1,35],$V8=[1,34],$V9=[1,30],$Va=[1,31],$Vb=[1,41],$Vc=[1,42],$Vd=[1,43],$Ve=[1,44],$Vf=[1,45],$Vg=[1,27],$Vh=[1,28],$Vi=[1,29],$Vj=[1,32],$Vk=[1,51],$Vl=[1,38],$Vm=[1,40],$Vn=[1,46],$Vo=[1,47],$Vp=[1,52],$Vq=[1,53],$Vr=[1,54],$Vs=[1,55],$Vt=[1,56],$Vu=[2,5,27,33,35,40,41,42,43,46,47,50,52,53,54,55,56,58,59,60,61,62,69,70,71,72,87,89,90,91,92,93],$Vv=[2,5,27,33,35,40,41,42,43,46,47,50,52,53,54,55,56,58,59,60,61,62,65,69,70,71,72,87,89,90,91,92,93],$Vw=[70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],$Vx=[2,111],$Vy=[2,115],$Vz=[1,66],$VA=[1,81],$VB=[1,83],$VC=[1,84],$VD=[1,86],$VE=[1,85],$VF=[1,87],$VG=[1,88],$VH=[1,89],$VI=[1,90],$VJ=[1,91],$VK=[1,92],$VL=[1,93],$VM=[1,94],$VN=[1,95],$VO=[1,96],$VP=[1,97],$VQ=[1,98],$VR=[1,99],$VS=[27,28],$VT=[22,29,36,39,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],$VU=[2,88],$VV=[1,110],$VW=[2,53],$VX=[1,128],$VY=[22,29,36,39,70,71,72,73,78,79,80,81,82,83,84,85,86],$VZ=[22,29,36,39,70,71,72,73,74,75,77,78,79,80,81,82,83,84,85,86],$V_=[2,64],$V$=[1,151],$V01=[1,152],$V11=[1,153],$V21=[1,154],$V31=[1,155],$V41=[36,39],$V51=[22,29,36,39,78,79,80,81,82,83,84,85,86],$V61=[2,116],$V71=[1,196],$V81=[2,79],$V91=[1,217],$Va1=[2,117],$Vb1=[1,270];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"ASIGNACION":8,"FUNCION":9,"BLOQUE":10,"PRINT":11,"PRINTLN":12,"LLAMADA":13,"METODO":14,"IF":15,"WHILE":16,"DOWHILE":17,"FOR":18,"BREAK":19,"RETURN":20,"MOD":21,";":22,"DECLARACIONNEWVECTOR":23,"DECLARACIONVECTOR":24,"MODIFICACIONVECTOR":25,"TIPODATO":26,"id":27,"[":28,"]":29,"=":30,"pr_new":31,"E":32,"pr_const":33,"pr_tochar":34,"(":35,")":36,"EXPRESIONES":37,"EXPRESIONES2":38,",":39,"pr_break":40,"pr_return":41,"pr_while":42,"pr_for":43,"INICIALIZACION":44,"ACTUALIZACION":45,"pr_do":46,"pr_call":47,"LLPARAMETROS":48,"LLPARAMETRO":49,"pr_void":50,"PARAMETROS":51,"pr_int":52,"pr_string":53,"pr_bool":54,"pr_double":55,"pr_char":56,"PARAMETRO":57,"{":58,"}":59,"pr_print":60,"pr_println":61,"pr_if":62,"BLOQUEIF":63,"ELSE":64,"pr_else":65,"TIPO_DECLARACION":66,"IDS":67,"TYPEOF":68,"pr_typeof":69,"++":70,"--":71,"-":72,"+":73,"*":74,"/":75,"**":76,"%":77,">":78,"<":79,">=":80,"<=":81,"==":82,"!=":83,"||":84,"&&":85,"^":86,"!":87,"F":88,"tk_entero":89,"tk_decimal":90,"tk_cadena":91,"tk_caracter":92,"tk_booleano":93,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",22:";",27:"id",28:"[",29:"]",30:"=",31:"pr_new",33:"pr_const",34:"pr_tochar",35:"(",36:")",39:",",40:"pr_break",41:"pr_return",42:"pr_while",43:"pr_for",46:"pr_do",47:"pr_call",50:"pr_void",52:"pr_int",53:"pr_string",54:"pr_bool",55:"pr_double",56:"pr_char",58:"{",59:"}",60:"pr_print",61:"pr_println",62:"pr_if",65:"pr_else",69:"pr_typeof",70:"++",71:"--",72:"-",73:"+",74:"*",75:"/",76:"**",77:"%",78:">",79:"<",80:">=",81:"<=",82:"==",83:"!=",84:"||",85:"&&",86:"^",87:"!",89:"tk_entero",90:"tk_decimal",91:"tk_cadena",92:"tk_caracter",93:"tk_booleano"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,2],[23,11],[23,12],[23,10],[23,11],[23,16],[23,17],[24,9],[24,10],[24,11],[24,12],[38,5],[38,3],[37,3],[37,1],[25,7],[25,10],[19,2],[20,2],[20,3],[16,5],[18,9],[44,4],[44,3],[45,3],[45,1],[17,7],[13,6],[48,3],[48,1],[48,0],[49,1],[14,6],[9,6],[26,1],[26,1],[26,1],[26,1],[26,1],[51,3],[51,1],[51,0],[57,2],[57,2],[57,2],[57,2],[57,2],[10,3],[10,2],[11,5],[12,5],[15,6],[15,6],[64,2],[64,2],[64,2],[64,0],[63,3],[63,2],[66,1],[66,0],[7,6],[7,5],[8,4],[67,3],[67,1],[68,4],[21,2],[21,2],[21,2],[21,2],[32,2],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,3],[32,2],[32,1],[32,1],[32,3],[32,1],[32,1],[32,4],[32,7],[32,4],[88,1],[88,1],[88,1],[88,1],[88,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 3:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 4: case 52: case 63:
this.$=[$$[$0]];
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 20: case 21: case 22: case 48: case 76: case 77: case 78: case 111: case 114:
this.$=$$[$0];
break;
case 19:
this.$=$$[$0-1];
break;
case 23:
 
                instancia.addError(new Error("Sintactico","Error en produccion de gramatica",_$[$0-1].first_line,_$[$0-1].first_column));
                
break;
case 24:
this.$=new DeclaracionNV($$[$0-9],$$[$0-10],$$[$0-4],$$[$0-2],null,true,1,_$[$0-10].first_line,_$[$0-10].first_column)
break;
case 25:
this.$=new DeclaracionNV($$[$0-9],$$[$0-10],$$[$0-4],$$[$0-2],null,false,1,_$[$0-11].first_line,_$[$0-11].first_column)
break;
case 26:
this.$=new Tochar($$[$0-8],$$[$0-9],$$[$0-2],true,_$[$0-9].first_line,_$[$0-9].first_column)
break;
case 27:
this.$=new Tochar($$[$0-8],$$[$0-9],$$[$0-2],false,_$[$0-10].first_line,_$[$0-10].first_column)
break;
case 28:
this.$=new DeclaracionNV($$[$0-14],$$[$0-15],$$[$0-7],$$[$0-5],$$[$0-2],true,2,_$[$0-15].first_line,_$[$0-15].first_column)
break;
case 29:
this.$=new DeclaracionNV($$[$0-14],$$[$0-15],$$[$0-7],$$[$0-5],$$[$0-2],false,2,_$[$0-16].first_line,_$[$0-16].first_column)
break;
case 30:
this.$=new DeclaracionV($$[$0-7],$$[$0-8],$$[$0-2],true,1,_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 31:
this.$=new DeclaracionV($$[$0-7],$$[$0-8],$$[$0-2],false,1,_$[$0-9].first_line,_$[$0-9].first_column);
break;
case 32:
this.$=new DeclaracionV($$[$0-9],$$[$0-10],$$[$0-2],true,2,_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 33:
this.$=new DeclaracionV($$[$0-9],$$[$0-10],$$[$0-2],false,2,_$[$0-11].first_line,_$[$0-11].first_column);
break;
case 34:
$$[$0].unshift($$[$0-3]); this.$=$$[$0];
break;
case 35:
this.$=[$$[$0-1]]
break;
case 36: case 51: case 62: case 87:
$$[$0].unshift($$[$0-2]); this.$=$$[$0];
break;
case 37: case 88:
this.$=[$$[$0]]
break;
case 38:
this.$=new ModificarVector($$[$0-6],$$[$0-4],null,$$[$0-1],1,_$[$0-6].first_line, _$[$0-6].first_column)
break;
case 39:
this.$=new ModificarVector($$[$0-9],$$[$0-7],$$[$0-4],$$[$0-1],2,_$[$0-9].first_line, _$[$0-9].first_column)
break;
case 40:
this.$=new Break(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 41:
this.$=new Return(null,_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 42:
this.$=new Return($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 43:
this.$=new While($$[$0-2],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 44:
this.$=new For($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line, _$[$0-8].first_column);
break;
case 45:
this.$=new Declaracion($$[$0-2],$$[$0-3],$$[$0],true,_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 46: case 47:
this.$=new Asignar($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 49:
this.$=new Dowhile($$[$0-2],$$[$0-5],_$[$0-6].first_line, _$[$0-6].first_column)
break;
case 50:
this.$=new llamada($$[$0-4],$$[$0-2],_$[$0-5].first_line, _$[$0-5].first_column)
break;
case 54:
this.$=$$[$0]
break;
case 55:
this.$=new metodo($$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column)
break;
case 56:
this.$=new Funcion($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 57:
this.$=Type.NUMBER
break;
case 58:
this.$=Type.STRING
break;
case 59:
this.$=Type.BOOLEAN
break;
case 60:
this.$=Type.DOUBLE
break;
case 61:
this.$=Type.CHAR
break;
case 65:
this.$=new Parametro(Type.NUMBER,$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 66:
this.$=new Parametro(Type.STRING,$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 67:
this.$=new Parametro(Type.BOOLEAN,$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 68:
this.$=new Parametro(Type.DOUBLE,$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 69:
this.$=new Parametro(Type.CHAR,$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 70: case 80:
this.$=new Bloque($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 72:
this.$=new Print($$[$0-2],_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 73:
this.$=new Println($$[$0-2],_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 74: case 75:
this.$=new Sentencia_if($$[$0-3],$$[$0-1],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 81:
this.$=null
break;
case 82:
this.$=false
break;
case 83:
this.$=true
break;
case 84:
this.$=new Declaracion($$[$0-3],$$[$0-4],$$[$0-1],false,_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 85:
this.$=new Declaracion($$[$0-3],$$[$0-4],$$[$0-1],true,_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 86:

            this.$=new Asignar($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
        
break;
case 89: case 113:
this.$=$$[$0-1]
break;
case 90:
this.$=new Modificador($$[$0],modificadorOption.INCREIZQUIERDA,_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 91:
this.$=new Modificador($$[$0-1],modificadorOption.INCREDERECHA,_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 92:
this.$=new Modificador($$[$0-1],modificadorOption.DECREDERECHA,_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 93:
this.$=new Modificador($$[$0],modificadorOption.DECREIZQUIERDA,_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 94:
this.$=new Arithmetic($$[$0],$$[$0],ArithmeticOption.NEGACION, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 95:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MAS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 96:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MENOS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 97:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 98:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.DIV, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 99:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.POT, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 100:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MODULO, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 101:
this.$= new Relacional($$[$0-2],$$[$0],RelacionalOption.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 102:
this.$= new Relacional($$[$0-2],$$[$0],RelacionalOption.MENOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 103:
this.$= new Relacional($$[$0-2],$$[$0],RelacionalOption.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 104:
this.$= new Relacional($$[$0-2],$$[$0],RelacionalOption.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 105:
this.$= new Relacional($$[$0-2],$$[$0],RelacionalOption.IGUALQUE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 106:
this.$= new Relacional($$[$0-2],$$[$0],RelacionalOption.DIFERENTEDE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 107:
this.$= new Logica($$[$0-2],$$[$0],logicaOption.OR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 108:
this.$= new Logica($$[$0-2],$$[$0],logicaOption.AND, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 109:
this.$= new Logica($$[$0-2],$$[$0],logicaOption.XOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 110:
this.$= new Logica($$[$0],$$[$0],logicaOption.NOT, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 112:
this.$= new Typof($$[$0],_$[$0].first_line, _$[$0].first_column);
break;
case 115:
this.$=new Acceso($$[$0],_$[$0].first_line, _$[$0].first_column);
break;
case 116:
this.$=new AccesoVector($$[$0-3],$$[$0-1],null,1,_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 117:
this.$=new AccesoVector($$[$0-6],$$[$0-4],$$[$0-1],2,_$[$0-6].first_line, _$[$0-6].first_column);
break;
case 118:
this.$=new llamadaF($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 119:
this.$=new Literal($$[$0],Type.NUMBER, _$[$0].first_line, _$[$0].first_column)
break;
case 120:
this.$=new Literal($$[$0],Type.DOUBLE, _$[$0].first_line, _$[$0].first_column)
break;
case 121:
this.$=new Literal($$[$0],Type.STRING, _$[$0].first_line, _$[$0].first_column)
break;
case 122:
this.$=new Literal($$[$0],Type.CHAR, _$[$0].first_line, _$[$0].first_column)
break;
case 123:
this.$=new Literal($$[$0],Type.BOOLEAN, _$[$0].first_line, _$[$0].first_column)
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,23:20,24:21,25:22,26:25,27:$V1,32:39,33:$V2,35:$V3,40:$V4,41:$V5,42:$V6,43:$V7,46:$V8,47:$V9,50:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,58:$Vg,60:$Vh,61:$Vi,62:$Vj,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{1:[3]},{2:$V0,5:[1,57],6:58,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,23:20,24:21,25:22,26:25,27:$V1,32:39,33:$V2,35:$V3,40:$V4,41:$V5,42:$V6,43:$V7,46:$V8,47:$V9,50:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,58:$Vg,60:$Vh,61:$Vi,62:$Vj,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{1:[2,2]},o($Vu,[2,4]),o($Vv,[2,5]),o($Vv,[2,6]),o($Vv,[2,7]),o($Vv,[2,8]),o($Vv,[2,9]),o($Vv,[2,10]),o($Vv,[2,11]),o($Vv,[2,12]),o($Vv,[2,13]),o($Vv,[2,14]),o($Vv,[2,15]),o($Vv,[2,16]),o($Vv,[2,17]),o($Vv,[2,18]),o($Vw,$Vx,{22:[1,59]}),o($Vv,[2,20]),o($Vv,[2,21]),o($Vv,[2,22]),{22:[1,60]},{26:61,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf},{27:[1,63],67:62},o($Vw,$Vy,{28:[1,65],30:[1,64],35:$Vz}),{2:$V0,4:67,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,23:20,24:21,25:22,26:25,27:$V1,32:39,33:$V2,35:$V3,40:$V4,41:$V5,42:$V6,43:$V7,46:$V8,47:$V9,50:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,58:$Vg,59:[1,68],60:$Vh,61:$Vi,62:$Vj,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{35:[1,69]},{35:[1,70]},{27:[1,71]},{27:[1,72]},{35:[1,73]},{35:[1,74]},{10:75,58:$Vg},{35:[1,76]},{22:[1,77]},{21:80,22:[1,78],27:$VA,32:79,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{21:80,27:$VA,32:82,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},{21:80,27:$VA,32:100,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},o($VS,[2,57]),o($VS,[2,58]),o($VS,[2,59]),o($VS,[2,60]),o($VS,[2,61]),{21:80,27:$VA,32:101,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{21:80,27:$VA,32:102,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},o($VT,[2,112]),{21:80,27:$VA,32:103,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},o($VT,[2,114]),{35:[1,104]},o($VT,[2,119]),o($VT,[2,120]),o($VT,[2,121]),o($VT,[2,122]),o($VT,[2,123]),{1:[2,1]},o($Vu,[2,3]),o($Vv,[2,19]),o($Vv,[2,23]),{27:[1,106],67:105},{30:[1,107]},{28:[1,109],30:$VU,35:[1,108],39:$VV},{21:80,27:$VA,32:111,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{21:80,27:$VA,32:112,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{21:80,27:$VA,32:115,35:$V3,36:$VW,48:113,49:114,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{2:$V0,6:58,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,23:20,24:21,25:22,26:25,27:$V1,32:39,33:$V2,35:$V3,40:$V4,41:$V5,42:$V6,43:$V7,46:$V8,47:$V9,50:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,58:$Vg,59:[1,116],60:$Vh,61:$Vi,62:$Vj,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},o($Vv,[2,71]),{21:80,27:$VA,32:117,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{21:80,27:$VA,32:118,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{35:[1,119]},{35:[1,120]},{21:80,27:$VA,32:121,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{21:80,27:$VA,32:122,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{42:[1,123]},{26:125,27:[1,126],44:124,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf},o($Vv,[2,40]),o($Vv,[2,41]),{22:[1,127],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},o($VT,$Vx),o($VT,$Vy,{28:$VX,35:$Vz}),o($VY,[2,90],{74:$VF,75:$VG,76:$VH,77:$VI}),o($VT,[2,91]),o($VT,[2,92]),{21:80,27:$VA,32:129,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{21:80,27:$VA,32:130,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{21:80,27:$VA,32:131,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{21:80,27:$VA,32:132,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{21:80,27:$VA,32:133,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{21:80,27:$VA,32:134,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{21:80,27:$VA,32:135,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{21:80,27:$VA,32:136,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{21:80,27:$VA,32:137,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{21:80,27:$VA,32:138,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{21:80,27:$VA,32:139,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{21:80,27:$VA,32:140,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{21:80,27:$VA,32:141,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{21:80,27:$VA,32:142,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{21:80,27:$VA,32:143,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},o($VY,[2,93],{74:$VF,75:$VG,76:$VH,77:$VI}),o($VT,[2,94]),o($VZ,[2,110],{76:$VH}),{36:[1,144],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},{21:80,27:$VA,32:145,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{30:[1,146]},{28:[1,147],30:$VU,39:$VV},{21:80,27:$VA,32:148,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{36:$V_,51:149,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,57:150},{29:[1,156]},{27:[1,158],67:157},{22:[1,159],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},{29:[1,160],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},{36:[1,161]},{36:[2,52],39:[1,162]},o($V41,[2,54],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR}),o($Vv,[2,70]),{36:[1,163],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},{36:[1,164],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},{21:80,27:$VA,32:115,35:$V3,36:$VW,48:165,49:114,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{36:$V_,51:166,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,57:150},{36:[1,167],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},{36:[1,168],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},{35:[1,169]},{22:[1,170]},{27:[1,171]},{30:[1,172]},o($Vv,[2,42]),{21:80,27:$VA,32:173,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},o($VY,[2,95],{74:$VF,75:$VG,76:$VH,77:$VI}),o($VY,[2,96],{74:$VF,75:$VG,76:$VH,77:$VI}),o($VZ,[2,97],{76:$VH}),o($VZ,[2,98],{76:$VH}),o($VZ,[2,99],{76:$VH}),o($VZ,[2,100],{76:$VH}),o($V51,[2,101],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI}),o($V51,[2,102],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI}),o($V51,[2,103],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI}),o($V51,[2,104],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI}),o($V51,[2,105],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI}),o($V51,[2,106],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI}),o([22,29,36,39,84],[2,107],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,85:$VQ,86:$VR}),o([22,29,36,39,84,85],[2,108],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,86:$VR}),o([22,29,36,39,84,85,86],[2,109],{70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO}),o($VT,[2,113]),{36:[1,174],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},{21:80,27:$VA,32:175,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{29:[1,176]},{22:[1,177],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},{36:[1,178]},{36:[2,63],39:[1,179]},{27:[1,180]},{27:[1,181]},{27:[1,182]},{27:[1,183]},{27:[1,184]},{28:[1,186],30:[1,185]},{30:[2,87]},{30:$VU,39:$VV},o($Vv,[2,86]),o($Vw,$V61,{28:[1,188],30:[1,187]}),o($VT,[2,118]),{21:80,27:$VA,32:115,35:$V3,36:$VW,48:189,49:114,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{22:[1,190]},{22:[1,191]},{36:[1,192]},{36:[1,193]},{2:$V0,6:195,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,23:20,24:21,25:22,26:25,27:$V1,32:39,33:$V2,35:$V3,40:$V4,41:$V5,42:$V6,43:$V7,46:$V8,47:$V9,50:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,58:$V71,60:$Vh,61:$Vi,62:$Vj,63:194,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{10:197,58:$Vg},{21:80,27:$VA,32:198,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{21:80,27:$VA,32:199,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{30:[1,200]},{21:80,27:$VA,32:201,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{29:[1,202],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},o($VT,[2,89]),{22:[1,203],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},{28:[1,205],30:[1,204]},o($Vv,[2,85]),{10:206,58:$Vg},{36:$V_,51:207,52:$V$,53:$V01,54:$V11,55:$V21,56:$V31,57:150},o($V41,[2,65]),o($V41,[2,66]),o($V41,[2,67]),o($V41,[2,68]),o($V41,[2,69]),{28:[1,210],31:[1,208],34:[1,209]},{29:[1,211]},{21:80,27:$VA,32:212,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{21:80,27:$VA,32:213,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{36:[2,51]},o($Vv,[2,72]),o($Vv,[2,73]),{22:[1,214]},{10:215,58:$Vg},o($Vu,$V81,{64:216,65:$V91}),o($Vu,$V81,{64:218,65:$V91}),{2:$V0,4:219,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,23:20,24:21,25:22,26:25,27:$V1,32:39,33:$V2,35:$V3,40:$V4,41:$V5,42:$V6,43:$V7,46:$V8,47:$V9,50:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,58:$Vg,59:[1,220],60:$Vh,61:$Vi,62:$Vj,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},o($Vv,[2,43]),{36:[1,221],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},{22:[1,222],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},{21:80,27:$VA,32:223,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{22:[2,46],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},o($VT,$V61,{28:[1,224]}),o($Vv,[2,84]),{28:[1,227],31:[1,225],34:[1,226]},{29:[1,228]},o($Vv,[2,56]),{36:[2,62]},{26:229,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf},{35:[1,230]},{21:80,27:$VA,32:232,35:$V3,37:231,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{30:[1,233]},{22:[1,234],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},{29:[1,235],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},o($Vv,[2,50]),o($Vv,[2,55]),o($Vv,[2,74]),{2:$V0,6:238,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:236,16:14,17:15,18:16,19:17,20:18,21:19,23:20,24:21,25:22,26:25,27:$V1,32:39,33:$V2,35:$V3,40:$V4,41:$V5,42:$V6,43:$V7,46:$V8,47:$V9,50:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,58:$V71,60:$Vh,61:$Vi,62:$Vj,63:237,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},o($Vv,[2,75]),{2:$V0,6:58,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,23:20,24:21,25:22,26:25,27:$V1,32:39,33:$V2,35:$V3,40:$V4,41:$V5,42:$V6,43:$V7,46:$V8,47:$V9,50:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,58:$Vg,59:[1,239],60:$Vh,61:$Vi,62:$Vj,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},o($Vv,[2,81]),{22:[1,240]},{21:243,27:[1,242],32:39,35:$V3,45:241,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{22:[2,45],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},{21:80,27:$VA,32:244,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{26:245,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf},{35:[1,246]},{21:80,27:$VA,32:232,35:$V3,37:247,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{30:[1,248]},{28:[1,249]},{21:80,27:$VA,32:250,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{29:[1,251]},{29:[2,37],39:[1,252],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},{28:[1,254],31:[1,253]},o($Vv,[2,38]),o($Vw,$Va1,{30:[1,255]}),o($Vv,[2,76]),o($Vv,[2,77]),o($Vv,[2,78]),o($Vv,[2,80]),o($Vv,[2,49]),{36:[1,256]},o($Vw,$Vy,{28:$VX,30:[1,257],35:$Vz}),o([36,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],[2,48]),{29:[1,258],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},{28:[1,259]},{21:80,27:$VA,32:260,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{29:[1,261]},{28:[1,263],31:[1,262]},{21:80,27:$VA,32:264,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{36:[1,265],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},{22:[1,266]},{21:80,27:$VA,32:232,35:$V3,37:267,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{26:268,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf},{28:$Vb1,38:269},{21:80,27:$VA,32:271,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{10:272,58:$Vg},{21:80,27:$VA,32:273,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},o($VT,$Va1),{21:80,27:$VA,32:274,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{36:[1,275],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},{22:[1,276]},{26:277,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf},{28:$Vb1,38:278},{29:[1,279],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},{22:[1,280]},o($Vv,[2,30]),{29:[2,36]},{28:[1,281]},{29:[1,282]},{21:80,27:$VA,32:232,35:$V3,37:283,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{22:[1,284],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},o($Vv,[2,44]),{36:[2,47],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},{29:[1,285],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},{22:[1,286]},o($Vv,[2,31]),{28:[1,287]},{29:[1,288]},{22:[1,289]},o($Vv,[2,26]),{21:80,27:$VA,32:290,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{22:[1,291]},{29:[1,292]},o($Vv,[2,39]),{22:[1,293]},o($Vv,[2,27]),{21:80,27:$VA,32:294,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{22:[1,295]},o($Vv,[2,24]),{29:[1,296],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},o($Vv,[2,32]),{29:[2,35],39:[1,297]},o($Vv,[2,25]),{29:[1,298],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},o($Vv,[2,33]),{28:[1,299]},{28:$Vb1,38:300},{28:[1,301]},{21:80,27:$VA,32:302,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{29:[2,34]},{21:80,27:$VA,32:303,35:$V3,68:48,69:$Vk,70:$Vl,71:$Vm,72:$Vn,87:$Vo,88:50,89:$Vp,90:$Vq,91:$Vr,92:$Vs,93:$Vt},{29:[1,304],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},{29:[1,305],70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG,76:$VH,77:$VI,78:$VJ,79:$VK,80:$VL,81:$VM,82:$VN,83:$VO,84:$VP,85:$VQ,86:$VR},{22:[1,306]},{22:[1,307]},o($Vv,[2,28]),o($Vv,[2,29])],
defaultActions: {3:[2,2],57:[2,1],157:[2,87],189:[2,51],207:[2,62],267:[2,36],300:[2,34]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Literal} = require('../expresiones/literal');

    const {Arithmetic} = require('../expresiones/aritmeticas');
    const {ArithmeticOption} = require('../expresiones/aritmeticOption');

    const {Relacional} = require('../expresiones/relacional');
    const {RelacionalOption} = require('../expresiones/relacionalOption');

    const {Logica} = require('../expresiones/logica');
    const {logicaOption} = require('../expresiones/logicaOption');

    const {Modificador} = require('../expresiones/modificador');
    const {modificadorOption} = require('../expresiones/modificadorOption');

    const {Typof} = require('../expresiones/typeof');

    const {llamadaF} = require('../expresiones/llamadaF');

    const {Sentencia_if} = require('../instrucciones/if');
    const {While} = require('../instrucciones/while');
    const {Dowhile} = require('../instrucciones/dowhile');
    const {For} = require('../instrucciones/for');
    const {metodo} = require('../instrucciones/metodo');
    const {Funcion} = require('../instrucciones/funcion');
    const {llamada} = require('../instrucciones/llamada');
    const {Declaracion} = require('../instrucciones/declaracion');
    const {Asignar} = require('../instrucciones/asignar');
    const {Type} = require('../symbols/type');
    const {Bloque}= require('../instrucciones/bloque');
    const {Print} = require('../instrucciones/print');
    const {Println} = require('../instrucciones/println');
    const {Acceso}=require('../expresiones/acceso');

    const {Singleton}=require("../patronSingleton/singleton");
    const {Error}=require("../objetos/error");
    const {Parametro}=require("../objetos/parametro");
    const instancia=Singleton.getInstance();

    const {Break}= require('../instrucciones/break');
    const {Return}= require('../instrucciones/return');

    const {DeclaracionNV}= require('../instrucciones/declaracionNewVector');
    const {DeclaracionV}= require('../instrucciones/declaracionVector');
    const {Tochar}= require('../instrucciones/tochararray');
    const {ModificarVector}= require('../instrucciones/modificarVector');

    const {AccesoVector}=require('../expresiones/accesoVector');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
                                console.log("el lexema encontrado es :"+ yy_.yytext) 
                                return 90
                            
break;
case 1:
                                console.log("el lexema encontrado es :"+ yy_.yytext) 
                                return 89
                            
break;
case 2:
                                console.log("el lexema encontrado es :"+ yy_.yytext) 
                                return 91
                            
break;
case 3:
                                console.log("el lexema encontrado es :"+ yy_.yytext) 
                                return 92
                            
break;
case 4:
                                console.log("el lexema encontrado es :"+ yy_.yytext) 
                                return 93
                            
break;
case 5:
                    console.log("el lexema encontrado es :"+ yy_.yytext);
                    return 52;
                
break;
case 6:
                    console.log("el lexema encontrado es :"+ yy_.yytext);
                    return 53;
                
break;
case 7:
                    console.log("el lexema encontrado es :"+ yy_.yytext);
                    return 54;
                
break;
case 8:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 55;
                
break;
case 9:
                    console.log("el lexema encontrado es :"+ yy_.yytext);
                    return 56;
                
break;
case 10:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 33;
                
break;
case 11:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 60;
                
break;
case 12:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 61;
                
break;
case 13:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 69;
                
break;
case 14:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 62;
                
break;
case 15:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 65;
                
break;
case 16:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 50;
                
break;
case 17:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 47;
                
break;
case 18:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 42;
                
break;
case 19:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 46;
                
break;
case 20:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 43;
                
break;
case 21:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 40;
                
break;
case 22:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 41;
                
break;
case 23:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 'pr_fun';
                
break;
case 24:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 31;
                
break;
case 25:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 34;
                
break;
case 26:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 22;
                
break;
case 27:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 39;
                
break;
case 28:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return ':';
                
break;
case 29:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 58;
                
break;
case 30:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 59;
                
break;
case 31:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 35;
                
break;
case 32:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 36;
                
break;
case 33:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 28;
                
break;
case 34:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 29;
                
break;
case 35:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 70;
                
break;
case 36:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 73;
                
break;
case 37:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 71;
                
break;
case 38:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 72;
                
break;
case 39:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 76;
                
break;
case 40:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 74;
                
break;
case 41:
                    //console.log("comentario de una linea")
                
break;
case 42:
break;
case 43:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 75;
                
break;
case 44:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 77;
                
break;
case 45:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 82;
                
break;
case 46:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 30;
                
break;
case 47:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 83;
                
break;
case 48:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 80;
                
break;
case 49:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 81;
                
break;
case 50:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 78;
                
break;
case 51:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 79;
                
break;
case 52:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 84;
                
break;
case 53:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 85;
                
break;
case 54:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 86;
                
break;
case 55:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 87;
                
break;
case 56:
                                console.log("el lexema encontrado es :"+ yy_.yytext); 
                                return 27;
                            
break;
case 57:
break;
case 58:
break;
case 59:
break;
case 60:return 5
break;
case 61: 
        //console.log("error lexico:"+yy_.yytext+ " fila: "+yy_.yylloc.first_line+" columna: "+yy_.yylloc.first_column);
        instancia.addError(new Error("Lexico","lexema: "+yy_.yytext+" no coincide con ningun patrón",yy_.yylloc.first_line,yy_.yylloc.first_column+1));
        //push para array errores
    
break;
}
},
rules: [/^(?:[0-9]+(\.[0-9]+))/i,/^(?:[0-9]+)/i,/^(?:[\"](\\"|[^"])*[\"])/i,/^(?:[\']([^']|\\n|\\t|(\\)(\\))?[\'])/i,/^(?:true|false\b)/i,/^(?:int\b)/i,/^(?:String\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:const\b)/i,/^(?:Print\b)/i,/^(?:Println\b)/i,/^(?:typeof\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:void\b)/i,/^(?:call\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:fun\b)/i,/^(?:New\b)/i,/^(?:tochararray\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\/)/i,/^(?:%)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:[a-zA-ZñÑ][a-zA-Z0-9_ñÑ]*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}