/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,20],$V1=[1,33],$V2=[1,34],$V3=[1,30],$V4=[1,46],$V5=[1,32],$V6=[1,23],$V7=[1,31],$V8=[1,27],$V9=[1,28],$Va=[1,38],$Vb=[1,39],$Vc=[1,40],$Vd=[1,41],$Ve=[1,42],$Vf=[1,24],$Vg=[1,25],$Vh=[1,26],$Vi=[1,29],$Vj=[1,21],$Vk=[1,48],$Vl=[1,35],$Vm=[1,37],$Vn=[1,43],$Vo=[1,44],$Vp=[1,49],$Vq=[1,50],$Vr=[1,51],$Vs=[1,52],$Vt=[1,53],$Vu=[2,5,23,24,26,27,29,33,35,36,40,43,44,45,46,47,49,50,51,52,53,58,61,62,63,64,79,81,82,83,84,85],$Vv=[2,5,23,24,26,27,29,33,35,36,40,43,44,45,46,47,49,50,51,52,53,56,58,61,62,63,64,79,81,82,83,84,85],$Vw=[62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78],$Vx=[2,92],$Vy=[2,96],$Vz=[1,62],$VA=[1,77],$VB=[1,79],$VC=[1,80],$VD=[1,82],$VE=[1,81],$VF=[1,83],$VG=[1,84],$VH=[1,85],$VI=[1,86],$VJ=[1,87],$VK=[1,88],$VL=[1,89],$VM=[1,90],$VN=[1,91],$VO=[1,92],$VP=[1,93],$VQ=[1,94],$VR=[1,95],$VS=[22,28,39,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78],$VT=[1,102],$VU=[2,69],$VV=[1,105],$VW=[2,34],$VX=[22,28,39,62,63,64,65,70,71,72,73,74,75,76,77,78],$VY=[22,28,39,62,63,64,65,66,67,69,70,71,72,73,74,75,76,77,78],$VZ=[2,45],$V_=[1,143],$V$=[1,144],$V01=[1,145],$V11=[1,146],$V21=[1,147],$V31=[28,39],$V41=[22,28,39,70,71,72,73,74,75,76,77,78],$V51=[1,179],$V61=[2,60],$V71=[1,191];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"ASIGNACION":8,"FUNCION":9,"BLOQUE":10,"PRINT":11,"PRINTLN":12,"LLAMADA":13,"METODO":14,"IF":15,"WHILE":16,"DOWHILE":17,"FOR":18,"BREAK":19,"RETURN":20,"MOD":21,";":22,"pr_break":23,"pr_return":24,"E":25,"pr_while":26,"(":27,")":28,"pr_for":29,"INICIALIZACION":30,"ACTUALIZACION":31,"TIPODATO_DECLARACION":32,"id":33,"=":34,"pr_do":35,"pr_call":36,"LLPARAMETROS":37,"LLPARAMETRO":38,",":39,"pr_void":40,"PARAMETROS":41,"TIPODATO":42,"pr_int":43,"pr_string":44,"pr_bool":45,"pr_double":46,"pr_char":47,"PARAMETRO":48,"{":49,"}":50,"pr_print":51,"pr_println":52,"pr_if":53,"BLOQUEIF":54,"ELSE":55,"pr_else":56,"TIPO_DECLARACION":57,"pr_const":58,"IDS":59,"TYPEOF":60,"pr_typeof":61,"++":62,"--":63,"-":64,"+":65,"*":66,"/":67,"**":68,"%":69,">":70,"<":71,">=":72,"<=":73,"==":74,"!=":75,"||":76,"&&":77,"^":78,"!":79,"F":80,"tk_entero":81,"tk_decimal":82,"tk_cadena":83,"tk_caracter":84,"tk_booleano":85,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",22:";",23:"pr_break",24:"pr_return",26:"pr_while",27:"(",28:")",29:"pr_for",32:"TIPODATO_DECLARACION",33:"id",34:"=",35:"pr_do",36:"pr_call",39:",",40:"pr_void",43:"pr_int",44:"pr_string",45:"pr_bool",46:"pr_double",47:"pr_char",49:"{",50:"}",51:"pr_print",52:"pr_println",53:"pr_if",56:"pr_else",58:"pr_const",61:"pr_typeof",62:"++",63:"--",64:"-",65:"+",66:"*",67:"/",68:"**",69:"%",70:">",71:"<",72:">=",73:"<=",74:"==",75:"!=",76:"||",77:"&&",78:"^",79:"!",81:"tk_entero",82:"tk_decimal",83:"tk_cadena",84:"tk_caracter",85:"tk_booleano"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[19,2],[20,2],[20,3],[16,5],[18,9],[30,4],[30,3],[31,3],[31,1],[17,7],[13,6],[37,3],[37,1],[37,0],[38,1],[14,6],[9,6],[42,1],[42,1],[42,1],[42,1],[42,1],[41,3],[41,1],[41,0],[48,2],[48,2],[48,2],[48,2],[48,2],[10,3],[10,2],[11,5],[12,5],[15,6],[15,6],[55,2],[55,2],[55,2],[55,0],[54,3],[54,2],[57,1],[57,0],[7,6],[7,5],[8,4],[59,3],[59,1],[60,4],[21,2],[21,2],[21,2],[21,2],[25,2],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,1],[25,1],[25,3],[25,1],[25,1],[25,4],[80,1],[80,1],[80,1],[80,1],[80,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 3:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 4: case 33: case 44:
this.$=[$$[$0]];
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 29: case 57: case 58: case 59: case 92: case 95:
this.$=$$[$0];
break;
case 19:
this.$=$$[$0-1];
break;
case 20:
 
                instancia.addError(new Error("Sintactico","Error en produccion de gramatica",_$[$0-1].first_line,_$[$0-1].first_column));
                
break;
case 21:
this.$=new Break(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 22:
this.$=new Return(null,_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 23:
this.$=new Return($$[$0-1],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 24:
this.$=new While($$[$0-2],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 25:
this.$=new For($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line, _$[$0-8].first_column);
break;
case 26:
this.$=new Declaracion($$[$0-2],$$[$0-3],$$[$0],true,_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 27: case 28:
this.$=new Asignar($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 30:
this.$=new Dowhile($$[$0-2],$$[$0-5],_$[$0-6].first_line, _$[$0-6].first_column)
break;
case 31:
this.$=new llamada($$[$0-4],$$[$0-2],_$[$0-5].first_line, _$[$0-5].first_column)
break;
case 32: case 43: case 68:
$$[$0].unshift($$[$0-2]); this.$=$$[$0];
break;
case 35:
this.$=$$[$0]
break;
case 36:
this.$=new metodo($$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column)
break;
case 37:
this.$=new Funcion($$[$0-5],$$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 38:
this.$=Type.NUMBER
break;
case 39:
this.$=Type.STRING
break;
case 40:
this.$=Type.BOOLEAN
break;
case 41:
this.$=Type.DOUBLE
break;
case 42:
this.$=Type.CHAR
break;
case 46:
this.$=new Parametro(Type.NUMBER,$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 47:
this.$=new Parametro(Type.STRING,$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 48:
this.$=new Parametro(Type.BOOLEAN,$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 49:
this.$=new Parametro(Type.DOUBLE,$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 50:
this.$=new Parametro(Type.CHAR,$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 51: case 61:
this.$=new Bloque($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 53:
this.$=new Print($$[$0-2],_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 54:
this.$=new Println($$[$0-2],_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 55: case 56:
this.$=new Sentencia_if($$[$0-3],$$[$0-1],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 63:
this.$=false
break;
case 64:
this.$=true
break;
case 65:
this.$=new Declaracion($$[$0-3],$$[$0-4],$$[$0-1],true,_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 66:
this.$=new Declaracion($$[$0-3],$$[$0-4],$$[$0-1],true,_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 67:

            this.$=new Asignar($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
        
break;
case 69:
this.$=[$$[$0]]
break;
case 70: case 94:
this.$=$$[$0-1]
break;
case 71:
this.$=new Modificador($$[$0],modificadorOption.INCREIZQUIERDA,_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 72:
this.$=new Modificador($$[$0-1],modificadorOption.INCREDERECHA,_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 73:
this.$=new Modificador($$[$0-1],modificadorOption.DECREDERECHA,_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 74:
this.$=new Modificador($$[$0],modificadorOption.DECREIZQUIERDA,_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 75:
this.$=new Arithmetic($$[$0],$$[$0],ArithmeticOption.NEGACION, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 76:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MAS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 77:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MENOS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 78:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 79:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.DIV, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 80:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.POT, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 81:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MODULO, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 82:
this.$= new Relacional($$[$0-2],$$[$0],RelacionalOption.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 83:
this.$= new Relacional($$[$0-2],$$[$0],RelacionalOption.MENOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 84:
this.$= new Relacional($$[$0-2],$$[$0],RelacionalOption.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 85:
this.$= new Relacional($$[$0-2],$$[$0],RelacionalOption.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 86:
this.$= new Relacional($$[$0-2],$$[$0],RelacionalOption.IGUALQUE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 87:
this.$= new Relacional($$[$0-2],$$[$0],RelacionalOption.DIFERENTEDE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 88:
this.$= new Logica($$[$0-2],$$[$0],logicaOption.OR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 89:
this.$= new Logica($$[$0-2],$$[$0],logicaOption.AND, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 90:
this.$= new Logica($$[$0-2],$$[$0],logicaOption.XOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 91:
this.$= new Logica($$[$0],$$[$0],logicaOption.NOT, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 93:
this.$= new Typof($$[$0],_$[$0].first_line, _$[$0].first_column);
break;
case 96:
this.$=new Acceso($$[$0],_$[$0].first_line, _$[$0].first_column);
break;
case 97:
this.$=new llamadaF($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 98:
this.$=new Literal($$[$0],Type.NUMBER, _$[$0].first_line, _$[$0].first_column)
break;
case 99:
this.$=new Literal($$[$0],Type.DOUBLE, _$[$0].first_line, _$[$0].first_column)
break;
case 100:
this.$=new Literal($$[$0],Type.STRING, _$[$0].first_line, _$[$0].first_column)
break;
case 101:
this.$=new Literal($$[$0],Type.CHAR, _$[$0].first_line, _$[$0].first_column)
break;
case 102:
this.$=new Literal($$[$0],Type.BOOLEAN, _$[$0].first_line, _$[$0].first_column)
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,23:$V1,24:$V2,25:36,26:$V3,27:$V4,29:$V5,33:$V6,35:$V7,36:$V8,40:$V9,42:22,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,49:$Vf,51:$Vg,52:$Vh,53:$Vi,58:$Vj,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{1:[3]},{2:$V0,5:[1,54],6:55,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,23:$V1,24:$V2,25:36,26:$V3,27:$V4,29:$V5,33:$V6,35:$V7,36:$V8,40:$V9,42:22,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,49:$Vf,51:$Vg,52:$Vh,53:$Vi,58:$Vj,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{1:[2,2]},o($Vu,[2,4]),o($Vv,[2,5]),o($Vv,[2,6]),o($Vv,[2,7]),o($Vv,[2,8]),o($Vv,[2,9]),o($Vv,[2,10]),o($Vv,[2,11]),o($Vv,[2,12]),o($Vv,[2,13]),o($Vv,[2,14]),o($Vv,[2,15]),o($Vv,[2,16]),o($Vv,[2,17]),o($Vv,[2,18]),o($Vw,$Vx,{22:[1,56]}),{22:[1,57]},{42:58,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve},{33:[1,60],59:59},o($Vw,$Vy,{27:$Vz,34:[1,61]}),{2:$V0,4:63,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,23:$V1,24:$V2,25:36,26:$V3,27:$V4,29:$V5,33:$V6,35:$V7,36:$V8,40:$V9,42:22,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,49:$Vf,50:[1,64],51:$Vg,52:$Vh,53:$Vi,58:$Vj,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{27:[1,65]},{27:[1,66]},{33:[1,67]},{33:[1,68]},{27:[1,69]},{27:[1,70]},{10:71,49:$Vf},{27:[1,72]},{22:[1,73]},{21:76,22:[1,74],25:75,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{21:76,25:78,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR},{21:76,25:96,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{33:[2,38]},{33:[2,39]},{33:[2,40]},{33:[2,41]},{33:[2,42]},{21:76,25:97,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{21:76,25:98,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},o($VS,[2,93]),{21:76,25:99,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},o($VS,[2,95]),{27:[1,100]},o($VS,[2,98]),o($VS,[2,99]),o($VS,[2,100]),o($VS,[2,101]),o($VS,[2,102]),{1:[2,1]},o($Vu,[2,3]),o($Vv,[2,19]),o($Vv,[2,20]),{33:$VT,59:101},{34:[1,103]},{27:[1,104],34:$VU,39:$VV},{21:76,25:106,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{21:76,25:109,27:$V4,28:$VW,33:$VA,37:107,38:108,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{2:$V0,6:55,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,23:$V1,24:$V2,25:36,26:$V3,27:$V4,29:$V5,33:$V6,35:$V7,36:$V8,40:$V9,42:22,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,49:$Vf,50:[1,110],51:$Vg,52:$Vh,53:$Vi,58:$Vj,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},o($Vv,[2,52]),{21:76,25:111,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{21:76,25:112,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{27:[1,113]},{27:[1,114]},{21:76,25:115,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{21:76,25:116,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{26:[1,117]},{30:118,32:[1,119],33:[1,120]},o($Vv,[2,21]),o($Vv,[2,22]),{22:[1,121],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR},o($VS,$Vx),o($VS,$Vy,{27:$Vz}),o($VX,[2,71],{66:$VF,67:$VG,68:$VH,69:$VI}),o($VS,[2,72]),o($VS,[2,73]),{21:76,25:122,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{21:76,25:123,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{21:76,25:124,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{21:76,25:125,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{21:76,25:126,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{21:76,25:127,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{21:76,25:128,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{21:76,25:129,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{21:76,25:130,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{21:76,25:131,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{21:76,25:132,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{21:76,25:133,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{21:76,25:134,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{21:76,25:135,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{21:76,25:136,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},o($VX,[2,74],{66:$VF,67:$VG,68:$VH,69:$VI}),o($VS,[2,75]),o($VY,[2,91],{68:$VH}),{28:[1,137],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR},{21:76,25:138,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{34:[1,139]},{34:$VU,39:$VV},{21:76,25:140,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{28:$VZ,41:141,43:$V_,44:$V$,45:$V01,46:$V11,47:$V21,48:142},{33:$VT,59:148},{22:[1,149],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR},{28:[1,150]},{28:[2,33],39:[1,151]},o($V31,[2,35],{62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR}),o($Vv,[2,51]),{28:[1,152],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR},{28:[1,153],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR},{21:76,25:109,27:$V4,28:$VW,33:$VA,37:154,38:108,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{28:$VZ,41:155,43:$V_,44:$V$,45:$V01,46:$V11,47:$V21,48:142},{28:[1,156],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR},{28:[1,157],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR},{27:[1,158]},{22:[1,159]},{33:[1,160]},{34:[1,161]},o($Vv,[2,23]),o($VX,[2,76],{66:$VF,67:$VG,68:$VH,69:$VI}),o($VX,[2,77],{66:$VF,67:$VG,68:$VH,69:$VI}),o($VY,[2,78],{68:$VH}),o($VY,[2,79],{68:$VH}),o($VY,[2,80],{68:$VH}),o($VY,[2,81],{68:$VH}),o($V41,[2,82],{62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI}),o($V41,[2,83],{62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI}),o($V41,[2,84],{62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI}),o($V41,[2,85],{62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI}),o($V41,[2,86],{62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI}),o($V41,[2,87],{62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI}),o([22,28,39,76],[2,88],{62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,77:$VQ,78:$VR}),o([22,28,39,76,77],[2,89],{62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,78:$VR}),o([22,28,39,76,77,78],[2,90],{62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO}),o($VS,[2,94]),{28:[1,162],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR},{21:76,25:163,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{22:[1,164],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR},{28:[1,165]},{28:[2,44],39:[1,166]},{33:[1,167]},{33:[1,168]},{33:[1,169]},{33:[1,170]},{33:[1,171]},{34:[2,68]},o($Vv,[2,67]),o($VS,[2,97]),{21:76,25:109,27:$V4,28:$VW,33:$VA,37:172,38:108,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{22:[1,173]},{22:[1,174]},{28:[1,175]},{28:[1,176]},{2:$V0,6:178,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,23:$V1,24:$V2,25:36,26:$V3,27:$V4,29:$V5,33:$V6,35:$V7,36:$V8,40:$V9,42:22,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,49:$V51,51:$Vg,52:$Vh,53:$Vi,54:177,58:$Vj,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{10:180,49:$Vf},{21:76,25:181,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{21:76,25:182,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{34:[1,183]},{21:76,25:184,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},o($VS,[2,70]),{22:[1,185],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR},o($Vv,[2,66]),{10:186,49:$Vf},{28:$VZ,41:187,43:$V_,44:$V$,45:$V01,46:$V11,47:$V21,48:142},o($V31,[2,46]),o($V31,[2,47]),o($V31,[2,48]),o($V31,[2,49]),o($V31,[2,50]),{28:[2,32]},o($Vv,[2,53]),o($Vv,[2,54]),{22:[1,188]},{10:189,49:$Vf},o($Vu,$V61,{55:190,56:$V71}),o($Vu,$V61,{55:192,56:$V71}),{2:$V0,4:193,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,23:$V1,24:$V2,25:36,26:$V3,27:$V4,29:$V5,33:$V6,35:$V7,36:$V8,40:$V9,42:22,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,49:$Vf,50:[1,194],51:$Vg,52:$Vh,53:$Vi,58:$Vj,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},o($Vv,[2,24]),{28:[1,195],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR},{22:[1,196],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR},{21:76,25:197,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{22:[2,27],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR},o($Vv,[2,65]),o($Vv,[2,37]),{28:[2,43]},o($Vv,[2,31]),o($Vv,[2,36]),o($Vv,[2,55]),{2:$V0,6:200,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:198,16:14,17:15,18:16,19:17,20:18,21:19,23:$V1,24:$V2,25:36,26:$V3,27:$V4,29:$V5,33:$V6,35:$V7,36:$V8,40:$V9,42:22,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,49:$V51,51:$Vg,52:$Vh,53:$Vi,54:199,58:$Vj,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},o($Vv,[2,56]),{2:$V0,6:55,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,20:18,21:19,23:$V1,24:$V2,25:36,26:$V3,27:$V4,29:$V5,33:$V6,35:$V7,36:$V8,40:$V9,42:22,43:$Va,44:$Vb,45:$Vc,46:$Vd,47:$Ve,49:$Vf,50:[1,201],51:$Vg,52:$Vh,53:$Vi,58:$Vj,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},o($Vv,[2,62]),{22:[1,202]},{21:205,25:36,27:$V4,31:203,33:[1,204],60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},{22:[2,26],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR},o($Vv,[2,57]),o($Vv,[2,58]),o($Vv,[2,59]),o($Vv,[2,61]),o($Vv,[2,30]),{28:[1,206]},o($Vw,$Vy,{27:$Vz,34:[1,207]}),o([28,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78],[2,29]),{10:208,49:$Vf},{21:76,25:209,27:$V4,33:$VA,60:45,61:$Vk,62:$Vl,63:$Vm,64:$Vn,79:$Vo,80:47,81:$Vp,82:$Vq,83:$Vr,84:$Vs,85:$Vt},o($Vv,[2,25]),{28:[2,28],62:$VB,63:$VC,64:$VD,65:$VE,66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR}],
defaultActions: {3:[2,2],38:[2,38],39:[2,39],40:[2,40],41:[2,41],42:[2,42],54:[2,1],148:[2,68],172:[2,32],187:[2,43]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Literal} = require('../expresiones/literal');

    const {Arithmetic} = require('../expresiones/aritmeticas');
    const {ArithmeticOption} = require('../expresiones/aritmeticOption');

    const {Relacional} = require('../expresiones/relacional');
    const {RelacionalOption} = require('../expresiones/relacionalOption');

    const {Logica} = require('../expresiones/logica');
    const {logicaOption} = require('../expresiones/logicaOption');

    const {Modificador} = require('../expresiones/modificador');
    const {modificadorOption} = require('../expresiones/modificadorOption');

    const {Typof} = require('../expresiones/typeof');

    const {llamadaF} = require('../expresiones/llamadaF');

    const {Sentencia_if} = require('../instrucciones/if');
    const {While} = require('../instrucciones/while');
    const {Dowhile} = require('../instrucciones/dowhile');
    const {For} = require('../instrucciones/for');
    const {metodo} = require('../instrucciones/metodo');
    const {Funcion} = require('../instrucciones/funcion');
    const {llamada} = require('../instrucciones/llamada');
    const {Declaracion} = require('../instrucciones/declaracion');
    const {Asignar} = require('../instrucciones/asignar');
    const {Type} = require('../symbols/type');
    const {Bloque}= require('../instrucciones/bloque');
    const {Print} = require('../instrucciones/print');
    const {Println} = require('../instrucciones/println');
    const {Acceso}=require('../expresiones/acceso');

    const {Singleton}=require("../patronSingleton/singleton");
    const {Error}=require("../objetos/error");
    const {Parametro}=require("../objetos/parametro");
    const instancia=Singleton.getInstance();

    const {Break}= require('../instrucciones/break');
    const {Return}= require('../instrucciones/return');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
                                console.log("el lexema encontrado es :"+ yy_.yytext) 
                                return 82
                            
break;
case 1:
                                console.log("el lexema encontrado es :"+ yy_.yytext) 
                                return 81
                            
break;
case 2:
                                console.log("el lexema encontrado es :"+ yy_.yytext) 
                                return 83
                            
break;
case 3:
                                console.log("el lexema encontrado es :"+ yy_.yytext) 
                                return 84
                            
break;
case 4:
                                console.log("el lexema encontrado es :"+ yy_.yytext) 
                                return 85
                            
break;
case 5:
                    console.log("el lexema encontrado es :"+ yy_.yytext);
                    return 43;
                
break;
case 6:
                    console.log("el lexema encontrado es :"+ yy_.yytext);
                    return 44;
                
break;
case 7:
                    console.log("el lexema encontrado es :"+ yy_.yytext);
                    return 45;
                
break;
case 8:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 46;
                
break;
case 9:
                    console.log("el lexema encontrado es :"+ yy_.yytext);
                    return 47;
                
break;
case 10:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 58;
                
break;
case 11:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 51;
                
break;
case 12:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 52;
                
break;
case 13:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 61;
                
break;
case 14:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 53;
                
break;
case 15:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 56;
                
break;
case 16:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 40;
                
break;
case 17:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 36;
                
break;
case 18:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 26;
                
break;
case 19:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 35;
                
break;
case 20:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 29;
                
break;
case 21:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 23;
                
break;
case 22:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 24;
                
break;
case 23:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 'pr_fun';
                
break;
case 24:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 22;
                
break;
case 25:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 39;
                
break;
case 26:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return ':';
                
break;
case 27:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 49;
                
break;
case 28:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 50;
                
break;
case 29:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 27;
                
break;
case 30:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 28;
                
break;
case 31:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 62;
                
break;
case 32:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 65;
                
break;
case 33:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 63;
                
break;
case 34:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 64;
                
break;
case 35:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 68;
                
break;
case 36:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 66;
                
break;
case 37:
                    //console.log("comentario de una linea")
                
break;
case 38:
break;
case 39:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 67;
                
break;
case 40:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 69;
                
break;
case 41:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 74;
                
break;
case 42:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 34;
                
break;
case 43:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 75;
                
break;
case 44:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 72;
                
break;
case 45:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 73;
                
break;
case 46:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 70;
                
break;
case 47:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 71;
                
break;
case 48:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 76;
                
break;
case 49:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 77;
                
break;
case 50:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 78;
                
break;
case 51:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 79;
                
break;
case 52:
                                console.log("el lexema encontrado es :"+ yy_.yytext); 
                                return 33;
                            
break;
case 53:
break;
case 54:
break;
case 55:
break;
case 56:return 5
break;
case 57: 
        //console.log("error lexico:"+yy_.yytext+ " fila: "+yy_.yylloc.first_line+" columna: "+yy_.yylloc.first_column);
        instancia.addError(new Error("Lexico","lexema: "+yy_.yytext+" no coincide con ningun patrón",yy_.yylloc.first_line,yy_.yylloc.first_column+1));
        //push para array errores
    
break;
}
},
rules: [/^(?:[0-9]+(\.[0-9]+))/i,/^(?:[0-9]+)/i,/^(?:[\"](\\"|[^"])*[\"])/i,/^(?:[\']([^']|\\n|\\t|(\\)(\\))?[\'])/i,/^(?:true|false\b)/i,/^(?:int\b)/i,/^(?:String\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:const\b)/i,/^(?:Print\b)/i,/^(?:Println\b)/i,/^(?:typeof\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:void\b)/i,/^(?:call\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:fun\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\/)/i,/^(?:%)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:[a-zA-ZñÑ][a-zA-Z0-9_ñÑ]*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}