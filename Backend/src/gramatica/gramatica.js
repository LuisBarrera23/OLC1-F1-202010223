/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[40,41,42,43,44],$V1=[2,54],$V2=[1,18],$V3=[1,30],$V4=[1,27],$V5=[1,38],$V6=[1,29],$V7=[1,20],$V8=[1,28],$V9=[1,24],$Va=[1,25],$Vb=[1,21],$Vc=[1,22],$Vd=[1,23],$Ve=[1,26],$Vf=[1,34],$Vg=[1,40],$Vh=[1,31],$Vi=[1,33],$Vj=[1,35],$Vk=[1,36],$Vl=[1,41],$Vm=[1,42],$Vn=[1,43],$Vo=[1,44],$Vp=[1,45],$Vq=[2,5,21,22,23,26,30,32,33,37,40,41,42,43,44,45,46,47,48,49,54,57,58,59,60,75,77,78,79,80,81],$Vr=[2,5,21,22,23,26,30,32,33,37,40,41,42,43,44,45,46,47,48,49,52,54,57,58,59,60,75,77,78,79,80,81],$Vs=[58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],$Vt=[2,86],$Vu=[1,51],$Vv=[1,52],$Vw=[1,53],$Vx=[1,54],$Vy=[1,55],$Vz=[2,90],$VA=[1,70],$VB=[1,71],$VC=[1,72],$VD=[1,74],$VE=[1,73],$VF=[1,75],$VG=[1,76],$VH=[1,77],$VI=[1,78],$VJ=[1,79],$VK=[1,80],$VL=[1,81],$VM=[1,82],$VN=[1,83],$VO=[1,84],$VP=[1,85],$VQ=[1,86],$VR=[1,87],$VS=[20,25,36,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],$VT=[1,94],$VU=[20,25,36,58,59,60,61,66,67,68,69,70,71,72,73,74],$VV=[20,25,36,58,59,60,61,62,63,65,66,67,68,69,70,71,72,73,74],$VW=[2,30],$VX=[2,35],$VY=[1,134],$VZ=[1,135],$V_=[1,136],$V$=[1,137],$V01=[1,138],$V11=[20,25,36,66,67,68,69,70,71,72,73,74],$V21=[25,36],$V31=[1,161],$V41=[2,50],$V51=[1,173];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"ASIGNACION":8,"BLOQUE":9,"PRINT":10,"PRINTLN":11,"LLAMADA":12,"METODO":13,"IF":14,"WHILE":15,"DOWHILE":16,"FOR":17,"BREAK":18,"MOD":19,";":20,"pr_break":21,"pr_while":22,"(":23,"E":24,")":25,"pr_for":26,"INICIALIZACION":27,"ACTUALIZACION":28,"TIPODATO_DECLARACION":29,"id":30,"=":31,"pr_do":32,"pr_call":33,"LLPARAMETROS":34,"LLPARAMETRO":35,",":36,"pr_void":37,"PARAMETROS":38,"PARAMETRO":39,"pr_int":40,"pr_string":41,"pr_bool":42,"pr_double":43,"pr_char":44,"{":45,"}":46,"pr_print":47,"pr_println":48,"pr_if":49,"BLOQUEIF":50,"ELSE":51,"pr_else":52,"TIPO_DECLARACION":53,"pr_const":54,"IDS":55,"TYPEOF":56,"pr_typeof":57,"++":58,"--":59,"-":60,"+":61,"*":62,"/":63,"**":64,"%":65,">":66,"<":67,">=":68,"<=":69,"==":70,"!=":71,"||":72,"&&":73,"^":74,"!":75,"F":76,"tk_entero":77,"tk_decimal":78,"tk_cadena":79,"tk_caracter":80,"tk_booleano":81,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",20:";",21:"pr_break",22:"pr_while",23:"(",25:")",26:"pr_for",30:"id",31:"=",32:"pr_do",33:"pr_call",36:",",37:"pr_void",40:"pr_int",41:"pr_string",42:"pr_bool",43:"pr_double",44:"pr_char",45:"{",46:"}",47:"pr_print",48:"pr_println",49:"pr_if",52:"pr_else",54:"pr_const",57:"pr_typeof",58:"++",59:"--",60:"-",61:"+",62:"*",63:"/",64:"**",65:"%",66:">",67:"<",68:">=",69:"<=",70:"==",71:"!=",72:"||",73:"&&",74:"^",75:"!",77:"tk_entero",78:"tk_decimal",79:"tk_cadena",80:"tk_caracter",81:"tk_booleano"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[18,2],[15,5],[17,9],[27,4],[27,3],[28,3],[28,1],[16,7],[12,6],[34,3],[34,1],[34,0],[35,1],[13,6],[38,3],[38,1],[38,0],[39,2],[39,2],[39,2],[39,2],[39,2],[9,3],[9,2],[10,5],[11,5],[14,6],[14,6],[51,2],[51,2],[51,2],[51,0],[50,3],[50,2],[53,1],[53,0],[29,1],[29,1],[29,1],[29,1],[29,1],[7,6],[8,4],[55,3],[55,1],[56,4],[19,2],[19,2],[19,2],[19,2],[24,2],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,1],[24,1],[24,3],[24,1],[24,1],[76,1],[76,1],[76,1],[76,1],[76,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1]
break;
case 3:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 4: case 29: case 34:
this.$=[$$[$0]];
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 25: case 47: case 48: case 49: case 86: case 89:
this.$=$$[$0];
break;
case 17:
this.$=$$[$0-1];
break;
case 18:
 
                instancia.addError(new Error("Sintactico","Error en produccion de gramatica",_$[$0-1].first_line,_$[$0-1].first_column));
                
break;
case 19:
this.$=new Break(_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 20:
this.$=new While($$[$0-2],$$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 21:
this.$=new For($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line, _$[$0-8].first_column);
break;
case 22:
this.$=new Declaracion($$[$0-2],$$[$0-3],$$[$0],true,_$[$0-3].first_line, _$[$0-3].first_column);
break;
case 23: case 24:
this.$=new Asignar($$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 26:
this.$=new Dowhile($$[$0-2],$$[$0-5],_$[$0-6].first_line, _$[$0-6].first_column)
break;
case 27:
this.$=new llamada($$[$0-4],$$[$0-2],_$[$0-5].first_line, _$[$0-5].first_column)
break;
case 28: case 33: case 62:
$$[$0].unshift($$[$0-2]); this.$=$$[$0];
break;
case 31: case 55: case 56: case 57: case 58: case 59:
this.$=$$[$0]
break;
case 32:
this.$=new metodo($$[$0-4],$$[$0-2],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column)
break;
case 36:
this.$=new Parametro(Type.NUMBER,$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 37:
this.$=new Parametro(Type.STRING,$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 38:
this.$=new Parametro(Type.BOOLEAN,$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 39:
this.$=new Parametro(Type.DOUBLE,$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 40:
this.$=new Parametro(Type.CHAR,$$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 41: case 51:
this.$=new Bloque($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 43:
this.$=new Print($$[$0-2],_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 44:
this.$=new Println($$[$0-2],_$[$0-4].first_line, _$[$0-4].first_column);
break;
case 45: case 46:
this.$=new Sentencia_if($$[$0-3],$$[$0-1],$$[$0],_$[$0-5].first_line, _$[$0-5].first_column);
break;
case 53:
this.$=false
break;
case 54:
this.$=true
break;
case 60:
   //console.log($$[$0-3]); 
            this.$=new Declaracion($$[$0-3],$$[$0-4],$$[$0-1],$$[$0-5],_$[$0-5].first_line, _$[$0-5].first_column);
        
break;
case 61:

            this.$=new Asignar($$[$0-3],$$[$0-1],_$[$0-3].first_line, _$[$0-3].first_column);
        
break;
case 63:
this.$=[$$[$0]]
break;
case 64: case 88:
this.$=$$[$0-1]
break;
case 65:
this.$=new Modificador($$[$0],modificadorOption.INCREIZQUIERDA,_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 66:
this.$=new Modificador($$[$0-1],modificadorOption.INCREDERECHA,_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 67:
this.$=new Modificador($$[$0-1],modificadorOption.DECREDERECHA,_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 68:
this.$=new Modificador($$[$0],modificadorOption.DECREIZQUIERDA,_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 69:
this.$=new Arithmetic($$[$0],$$[$0],ArithmeticOption.NEGACION, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 70:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MAS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 71:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MENOS, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 72:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 73:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.DIV, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 74:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.POT, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 75:
this.$= new Arithmetic($$[$0-2],$$[$0],ArithmeticOption.MODULO, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 76:
this.$= new Relacional($$[$0-2],$$[$0],RelacionalOption.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 77:
this.$= new Relacional($$[$0-2],$$[$0],RelacionalOption.MENOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 78:
this.$= new Relacional($$[$0-2],$$[$0],RelacionalOption.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 79:
this.$= new Relacional($$[$0-2],$$[$0],RelacionalOption.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 80:
this.$= new Relacional($$[$0-2],$$[$0],RelacionalOption.IGUALQUE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 81:
this.$= new Relacional($$[$0-2],$$[$0],RelacionalOption.DIFERENTEDE, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 82:
this.$= new Logica($$[$0-2],$$[$0],logicaOption.OR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 83:
this.$= new Logica($$[$0-2],$$[$0],logicaOption.AND, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 84:
this.$= new Logica($$[$0-2],$$[$0],logicaOption.XOR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 85:
this.$= new Logica($$[$0],$$[$0],logicaOption.NOT, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 87:
this.$= new Typof($$[$0],_$[$0].first_line, _$[$0].first_column);
break;
case 90:
this.$=new Acceso($$[$0],_$[$0].first_line, _$[$0].first_column);console.log("desde la gramatica");
break;
case 91:
this.$=new Literal($$[$0],Type.NUMBER, _$[$0].first_line, _$[$0].first_column)
break;
case 92:
this.$=new Literal($$[$0],Type.DOUBLE, _$[$0].first_line, _$[$0].first_column)
break;
case 93:
this.$=new Literal($$[$0],Type.STRING, _$[$0].first_line, _$[$0].first_column)
break;
case 94:
this.$=new Literal($$[$0],Type.CHAR, _$[$0].first_line, _$[$0].first_column)
break;
case 95:
this.$=new Literal($$[$0],Type.BOOLEAN, _$[$0].first_line, _$[$0].first_column)
break;
}
},
table: [o($V0,$V1,{3:1,4:2,6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,53:19,24:32,56:37,76:39,2:$V2,5:[1,3],21:$V3,22:$V4,23:$V5,26:$V6,30:$V7,32:$V8,33:$V9,37:$Va,45:$Vb,47:$Vc,48:$Vd,49:$Ve,54:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp}),{1:[3]},o($V0,$V1,{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,53:19,24:32,56:37,76:39,6:47,2:$V2,5:[1,46],21:$V3,22:$V4,23:$V5,26:$V6,30:$V7,32:$V8,33:$V9,37:$Va,45:$Vb,47:$Vc,48:$Vd,49:$Ve,54:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp}),{1:[2,2]},o($Vq,[2,4]),o($Vr,[2,5]),o($Vr,[2,6]),o($Vr,[2,7]),o($Vr,[2,8]),o($Vr,[2,9]),o($Vr,[2,10]),o($Vr,[2,11]),o($Vr,[2,12]),o($Vr,[2,13]),o($Vr,[2,14]),o($Vr,[2,15]),o($Vr,[2,16]),o($Vs,$Vt,{20:[1,48]}),{20:[1,49]},{29:50,40:$Vu,41:$Vv,42:$Vw,43:$Vx,44:$Vy},o($Vs,$Vz,{31:[1,56]}),o($V0,$V1,{6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,53:19,24:32,56:37,76:39,4:57,2:$V2,21:$V3,22:$V4,23:$V5,26:$V6,30:$V7,32:$V8,33:$V9,37:$Va,45:$Vb,46:[1,58],47:$Vc,48:$Vd,49:$Ve,54:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp}),{23:[1,59]},{23:[1,60]},{30:[1,61]},{30:[1,62]},{23:[1,63]},{23:[1,64]},{9:65,45:$Vb},{23:[1,66]},{20:[1,67]},{19:69,23:$V5,24:68,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR},{19:69,23:$V5,24:88,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},o($V0,[2,53]),{19:69,23:$V5,24:89,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{19:69,23:$V5,24:90,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},o($VS,[2,87]),{19:69,23:$V5,24:91,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},o($VS,[2,89]),{23:[1,92]},o($VS,[2,91]),o($VS,[2,92]),o($VS,[2,93]),o($VS,[2,94]),o($VS,[2,95]),{1:[2,1]},o($Vq,[2,3]),o($Vr,[2,17]),o($Vr,[2,18]),{30:$VT,55:93},{30:[2,55]},{30:[2,56]},{30:[2,57]},{30:[2,58]},{30:[2,59]},{19:69,23:$V5,24:95,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},o($V0,$V1,{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,53:19,24:32,56:37,76:39,6:47,2:$V2,21:$V3,22:$V4,23:$V5,26:$V6,30:$V7,32:$V8,33:$V9,37:$Va,45:$Vb,46:[1,96],47:$Vc,48:$Vd,49:$Ve,54:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp}),o($Vr,[2,42]),{19:69,23:$V5,24:97,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{19:69,23:$V5,24:98,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{23:[1,99]},{23:[1,100]},{19:69,23:$V5,24:101,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{19:69,23:$V5,24:102,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{22:[1,103]},{27:104,29:105,30:[1,106],40:$Vu,41:$Vv,42:$Vw,43:$Vx,44:$Vy},o($Vr,[2,19]),o($VU,[2,65],{62:$VF,63:$VG,64:$VH,65:$VI}),o($VS,$Vt),o($VS,$Vz),o($VS,[2,66]),o($VS,[2,67]),{19:69,23:$V5,24:107,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{19:69,23:$V5,24:108,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{19:69,23:$V5,24:109,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{19:69,23:$V5,24:110,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{19:69,23:$V5,24:111,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{19:69,23:$V5,24:112,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{19:69,23:$V5,24:113,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{19:69,23:$V5,24:114,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{19:69,23:$V5,24:115,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{19:69,23:$V5,24:116,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{19:69,23:$V5,24:117,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{19:69,23:$V5,24:118,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{19:69,23:$V5,24:119,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{19:69,23:$V5,24:120,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{19:69,23:$V5,24:121,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},o($VU,[2,68],{62:$VF,63:$VG,64:$VH,65:$VI}),o($VS,[2,69]),o($VV,[2,85],{64:$VH}),{25:[1,122],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR},{19:69,23:$V5,24:123,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{31:[1,124]},{31:[2,63],36:[1,125]},{20:[1,126],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR},o($Vr,[2,41]),{25:[1,127],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR},{25:[1,128],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR},{19:69,23:$V5,24:131,25:$VW,30:$VA,34:129,35:130,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{25:$VX,38:132,39:133,40:$VY,41:$VZ,42:$V_,43:$V$,44:$V01},{25:[1,139],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR},{25:[1,140],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR},{23:[1,141]},{20:[1,142]},{30:[1,143]},{31:[1,144]},o($VU,[2,70],{62:$VF,63:$VG,64:$VH,65:$VI}),o($VU,[2,71],{62:$VF,63:$VG,64:$VH,65:$VI}),o($VV,[2,72],{64:$VH}),o($VV,[2,73],{64:$VH}),o($VV,[2,74],{64:$VH}),o($VV,[2,75],{64:$VH}),o($V11,[2,76],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI}),o($V11,[2,77],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI}),o($V11,[2,78],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI}),o($V11,[2,79],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI}),o($V11,[2,80],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI}),o($V11,[2,81],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI}),o([20,25,36,72],[2,82],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,73:$VQ,74:$VR}),o([20,25,36,72,73],[2,83],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,74:$VR}),o([20,25,36,72,73,74],[2,84],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO}),o($VS,[2,88]),{25:[1,145],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR},{19:69,23:$V5,24:146,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{30:$VT,55:147},o($Vr,[2,61]),{20:[1,148]},{20:[1,149]},{25:[1,150]},{25:[2,29],36:[1,151]},o($V21,[2,31],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR}),{25:[1,152]},{25:[2,34],36:[1,153]},{30:[1,154]},{30:[1,155]},{30:[1,156]},{30:[1,157]},{30:[1,158]},o($V0,$V1,{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,53:19,24:32,56:37,76:39,50:159,6:160,2:$V2,21:$V3,22:$V4,23:$V5,26:$V6,30:$V7,32:$V8,33:$V9,37:$Va,45:$V31,47:$Vc,48:$Vd,49:$Ve,54:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp}),{9:162,45:$Vb},{19:69,23:$V5,24:163,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{19:69,23:$V5,24:164,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{31:[1,165]},{19:69,23:$V5,24:166,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},o($VS,[2,64]),{20:[1,167],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR},{31:[2,62]},o($Vr,[2,43]),o($Vr,[2,44]),{20:[1,168]},{19:69,23:$V5,24:131,25:$VW,30:$VA,34:169,35:130,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{9:170,45:$Vb},{25:$VX,38:171,39:133,40:$VY,41:$VZ,42:$V_,43:$V$,44:$V01},o($V21,[2,36]),o($V21,[2,37]),o($V21,[2,38]),o($V21,[2,39]),o($V21,[2,40]),o($Vq,$V41,{51:172,52:$V51}),o($Vq,$V41,{51:174,52:$V51}),o($V0,$V1,{6:4,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,53:19,24:32,56:37,76:39,4:175,2:$V2,21:$V3,22:$V4,23:$V5,26:$V6,30:$V7,32:$V8,33:$V9,37:$Va,45:$Vb,46:[1,176],47:$Vc,48:$Vd,49:$Ve,54:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp}),o($Vr,[2,20]),{25:[1,177],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR},{20:[1,178],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR},{19:69,23:$V5,24:179,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{20:[2,23],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR},o($Vr,[2,60]),o($Vr,[2,27]),{25:[2,28]},o($Vr,[2,32]),{25:[2,33]},o($Vr,[2,45]),o($V0,$V1,{7:5,8:6,9:7,10:8,11:9,12:10,13:11,15:13,16:14,17:15,18:16,19:17,53:19,24:32,56:37,76:39,14:180,50:181,6:182,2:$V2,21:$V3,22:$V4,23:$V5,26:$V6,30:$V7,32:$V8,33:$V9,37:$Va,45:$V31,47:$Vc,48:$Vd,49:$Ve,54:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp}),o($Vr,[2,46]),o($V0,$V1,{7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:13,16:14,17:15,18:16,19:17,53:19,24:32,56:37,76:39,6:47,2:$V2,21:$V3,22:$V4,23:$V5,26:$V6,30:$V7,32:$V8,33:$V9,37:$Va,45:$Vb,46:[1,183],47:$Vc,48:$Vd,49:$Ve,54:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp}),o($Vr,[2,52]),{20:[1,184]},{19:187,23:$V5,24:32,28:185,30:[1,186],56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},{20:[2,22],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR},o($Vr,[2,47]),o($Vr,[2,48]),o($Vr,[2,49]),o($Vr,[2,51]),o($Vr,[2,26]),{25:[1,188]},o($Vs,$Vz,{31:[1,189]}),o([25,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],[2,25]),{9:190,45:$Vb},{19:69,23:$V5,24:191,30:$VA,56:37,57:$Vg,58:$Vh,59:$Vi,60:$Vj,75:$Vk,76:39,77:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp},o($Vr,[2,21]),{25:[2,24],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR}],
defaultActions: {3:[2,2],46:[2,1],51:[2,55],52:[2,56],53:[2,57],54:[2,58],55:[2,59],147:[2,62],169:[2,28],171:[2,33]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const {Literal} = require('../expresiones/literal');

    const {Arithmetic} = require('../expresiones/aritmeticas');
    const {ArithmeticOption} = require('../expresiones/aritmeticOption');

    const {Relacional} = require('../expresiones/relacional');
    const {RelacionalOption} = require('../expresiones/relacionalOption');

    const {Logica} = require('../expresiones/logica');
    const {logicaOption} = require('../expresiones/logicaOption');

    const {Modificador} = require('../expresiones/modificador');
    const {modificadorOption} = require('../expresiones/modificadorOption');

    const {Typof} = require('../expresiones/typeof');

    const {Sentencia_if} = require('../instrucciones/if');
    const {While} = require('../instrucciones/while');
    const {Dowhile} = require('../instrucciones/dowhile');
    const {For} = require('../instrucciones/for');
    const {metodo} = require('../instrucciones/metodo');
    const {llamada} = require('../instrucciones/llamada');
    const {Declaracion} = require('../instrucciones/declaracion');
    const {Asignar} = require('../instrucciones/asignar');
    const {Type} = require('../symbols/type');
    const {Bloque}= require('../instrucciones/bloque');
    const {Print} = require('../instrucciones/print');
    const {Println} = require('../instrucciones/println');
    const {Acceso}=require('../expresiones/acceso');

    const {Singleton}=require("../patronSingleton/singleton");
    const {Error}=require("../objetos/error");
    const {Parametro}=require("../objetos/parametro");
    const instancia=Singleton.getInstance();

    const {Break}= require('../instrucciones/break');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
                                console.log("el lexema encontrado es :"+ yy_.yytext) 
                                return 78
                            
break;
case 1:
                                console.log("el lexema encontrado es :"+ yy_.yytext) 
                                return 77
                            
break;
case 2:
                                console.log("el lexema encontrado es :"+ yy_.yytext) 
                                return 79
                            
break;
case 3:
                                console.log("el lexema encontrado es :"+ yy_.yytext) 
                                return 80
                            
break;
case 4:
                                console.log("el lexema encontrado es :"+ yy_.yytext) 
                                return 81
                            
break;
case 5:
                    console.log("el lexema encontrado es :"+ yy_.yytext);
                    return 40;
                
break;
case 6:
                    console.log("el lexema encontrado es :"+ yy_.yytext);
                    return 41;
                
break;
case 7:
                    console.log("el lexema encontrado es :"+ yy_.yytext);
                    return 42;
                
break;
case 8:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 43;
                
break;
case 9:
                    console.log("el lexema encontrado es :"+ yy_.yytext);
                    return 44;
                
break;
case 10:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 54;
                
break;
case 11:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 47;
                
break;
case 12:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 48;
                
break;
case 13:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 57;
                
break;
case 14:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 49;
                
break;
case 15:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 52;
                
break;
case 16:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 37;
                
break;
case 17:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 33;
                
break;
case 18:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 22;
                
break;
case 19:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 32;
                
break;
case 20:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 26;
                
break;
case 21:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 21;
                
break;
case 22:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 20;
                
break;
case 23:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 36;
                
break;
case 24:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return ':';
                
break;
case 25:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 45;
                
break;
case 26:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 46;
                
break;
case 27:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 23;
                
break;
case 28:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 25;
                
break;
case 29:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 58;
                
break;
case 30:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 61;
                
break;
case 31:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 59;
                
break;
case 32:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 60;
                
break;
case 33:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 64;
                
break;
case 34:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 62;
                
break;
case 35:
                    //console.log("comentario de una linea")
                
break;
case 36:
break;
case 37:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 63;
                
break;
case 38:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 65;
                
break;
case 39:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 70;
                
break;
case 40:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 31;
                
break;
case 41:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 71;
                
break;
case 42:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 68;
                
break;
case 43:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 69;
                
break;
case 44:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 66;
                
break;
case 45:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 67;
                
break;
case 46:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 72;
                
break;
case 47:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 73;
                
break;
case 48:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 74;
                
break;
case 49:
                    console.log("el lexema encontrado es :"+ yy_.yytext); 
                    return 75;
                
break;
case 50:
                                console.log("el lexema encontrado es :"+ yy_.yytext); 
                                return 30;
                            
break;
case 51:
break;
case 52:
break;
case 53:
break;
case 54:return 5
break;
case 55: 
        //console.log("error lexico:"+yy_.yytext+ " fila: "+yy_.yylloc.first_line+" columna: "+yy_.yylloc.first_column);
        instancia.addError(new Error("Lexico","lexema: "+yy_.yytext+" no coincide con ningun patrón",yy_.yylloc.first_line,yy_.yylloc.first_column+1));
        //push para array errores
    
break;
}
},
rules: [/^(?:[0-9]+(\.[0-9]+))/i,/^(?:[0-9]+)/i,/^(?:[\"](\\"|[^"])*[\"])/i,/^(?:[\']([^']|\\n|\\t|(\\)(\\))?[\'])/i,/^(?:true|false\b)/i,/^(?:int\b)/i,/^(?:String\b)/i,/^(?:boolean\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:const\b)/i,/^(?:Print\b)/i,/^(?:Println\b)/i,/^(?:typeof\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:void\b)/i,/^(?:call\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\/)/i,/^(?:%)/i,/^(?:==)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:\^)/i,/^(?:!)/i,/^(?:[a-zA-ZñÑ][a-zA-Z0-9_ñÑ]*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}